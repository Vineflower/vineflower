package pkg

import kotlin.contracts.InvocationKind
import kotlin.jvm.internal.SourceDebugExtension

@SourceDebugExtension(["SMAP\nTestContracts.kt\nKotlin\n*S Kotlin\n*F\n+ 1 TestContracts.kt\npkg/TestContracts\n+ 2 fake.kt\nkotlin/jvm/internal/FakeKt\n*L\n1#1,56:1\n1#2:57\n*E\n"])
public class TestContracts {
   public fun testSimpleContract(x: Int?): Int {
      contract {
         returns() implies (x != null)
      }

      if (x == null) {// 13
         throw new IllegalStateException("x is null".toString());
      } else {
         return x;// 14
      }
   }

   public fun testBooleanContract(a: Boolean, b: Boolean): Boolean? {
      contract {
         returns(true) implies (!a && !b)
         returns(null) implies (a && b)
         returns(false) implies ((a && !b || (!a && b)
      }

      return if (a && b) null else a || b;// 24
   }

   public fun testTypeContract(x: Any?): Int {
      contract {
         returns() implies (x is Int)
      }

      if (x !is Integer) {// 31
         throw new IllegalStateException("x is not Int".toString());
      } else {
         return (x as java.lang.Number).intValue();// 32
      }
   }

   public fun testFunctionalContract(f: () -> Int): Int {
      contract {
         callsInPlace(f, InvocationKind.EXACTLY_ONCE)
      }

      return (f.invoke() as java.lang.Number).intValue();// 39
   }

   public fun testFunctionalContract2(f: () -> Int, b: Boolean): Int {
      contract {
         callsInPlace(f, InvocationKind.AT_MOST_ONCE)
      }

      return if (b) (f.invoke() as java.lang.Number).intValue() else 0;// 46
   }

   public fun testFunctionalContract3(f: () -> Int, i: Int): Int {
      contract {
         callsInPlace(f)
      }

      val var3: java.lang.Iterable = (new IntRange(0, i)) as java.lang.Iterable;
      var var4: Int = 0;
      val var5: java.util.Iterator = var3.iterator();

      while (var5.hasNext()) {
         val var6: Int = (var5 as IntIterator).nextInt();
         var4 += (f.invoke() as java.lang.Number).intValue();
      }

      return var4;// 53
   }
}

class 'pkg/TestContracts' {
   method 'testSimpleContract (Ljava/lang/Integer;)I' {
      0      12
      1      12
      2      12
      3      12
      8      13
      9      13
      a      13
      b      13
      c      13
      10      13
      11      15
      12      15
      13      15
      14      15
      15      15
   }

   method 'testBooleanContract (ZZ)Ljava/lang/Boolean;' {
      0      26
      1      26
      2      26
      3      26
      4      26
      5      26
      6      26
      7      26
      8      26
      c      26
      d      26
      e      26
      f      26
      10      26
      11      26
      12      26
      13      26
      19      26
      1a      26
      1b      26
      1c      26
   }

   method 'testTypeContract (Ljava/lang/Object;)I' {
      0      34
      4      34
      5      34
      6      34
      b      35
      c      35
      d      35
      e      35
      f      35
      13      35
      14      37
      15      37
      16      37
      17      37
      18      37
      19      37
      1a      37
      1b      37
   }

   method 'testFunctionalContract (Lkotlin/jvm/functions/Function0;)I' {
      6      46
      7      46
      8      46
      9      46
      a      46
      b      46
      c      46
      d      46
      e      46
      f      46
      10      46
      11      46
      12      46
   }

   method 'testFunctionalContract2 (Lkotlin/jvm/functions/Function0;Z)I' {
      6      54
      7      54
      8      54
      9      54
      a      54
      b      54
      c      54
      d      54
      e      54
      f      54
      10      54
      11      54
      12      54
      13      54
      14      54
      15      54
      19      54
      1a      54
   }

   method 'testFunctionalContract3 (Lkotlin/jvm/functions/Function0;I)I' {
      a      62
      b      62
      f      62
      10      62
      11      62
      12      62
      13      63
      14      63
      15      63
      16      64
      17      64
      18      64
      19      64
      1a      64
      1b      64
      1c      64
      1d      64
      1e      66
      1f      66
      20      66
      21      66
      22      66
      23      66
      24      66
      28      67
      29      67
      2a      67
      2b      67
      2c      67
      2d      67
      2e      67
      2f      67
      30      67
      31      67
      3d      68
      3e      68
      3f      68
      40      68
      41      68
      42      68
      43      68
      44      68
      45      68
      46      68
      47      68
      48      68
      4d      68
      4e      68
      50      68
      51      68
      55      71
      56      71
      57      71
   }
}

Lines mapping:
13 <-> 13
14 <-> 16
24 <-> 27
31 <-> 35
32 <-> 38
39 <-> 47
46 <-> 55
53 <-> 72
Not mapped:
57
