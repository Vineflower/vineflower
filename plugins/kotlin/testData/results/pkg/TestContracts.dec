package pkg

import java.util.Iterator
import kotlin.contracts.InvocationKind

class TestContracts {
   public fun testSimpleContract(x: Int?): Int {
      contract {
         returns() implies (x != null)
      }

      if (x == null) {// 13
         throw new IllegalStateException("x is null".toString());
      } else {
         return x;// 14
      }
   }

   public fun testBooleanContract(a: Boolean, b: Boolean): Boolean? {
      contract {
         returns(true) implies (!a && !b)
         returns(null) implies (a && b)
         returns(false) implies ((a && !b || (!a && b)
      }

      return if (a && b) null else a || b;// 24
   }

   public fun testTypeContract(x: Any?): Int {
      contract {
         returns() implies (x is Int)
      }

      if (x !is Integer) {// 31
         throw new IllegalStateException("x is not Int".toString());
      } else {
         return (x as java.lang.Number).intValue();// 32
      }
   }

   public fun testFunctionalContract(f: () -> Int): Int {
      contract {
         callsInPlace(f, InvocationKind.EXACTLY_ONCE)
      }

      return (f.invoke() as java.lang.Number).intValue();// 39
   }

   public fun testFunctionalContract2(f: () -> Int, b: Boolean): Int {
      contract {
         callsInPlace(f, InvocationKind.AT_MOST_ONCE)
      }

      return if (b) (f.invoke() as java.lang.Number).intValue() else 0;// 46
   }

   public fun testFunctionalContract3(f: () -> Int, i: Int): Int {
      contract {
         callsInPlace(f)
      }

      var var3: java.lang.Iterable = (new IntRange(0, i)) as java.lang.Iterable;
      var var4: Int = 0;
      var var5: Iterator = var3.iterator();

      while (var5.hasNext()) {
         var var6: Int = (var5 as IntIterator).nextInt();
         var4 += (f.invoke() as java.lang.Number).intValue();
      }

      return var4;// 53
   }
}

class 'pkg/TestContracts' {
   method 'testSimpleContract (Ljava/lang/Integer;)I' {
      1      11
      2      11
      9      12
      a      12
      b      12
      c      12
      d      12
      11      12
      12      14
      13      14
      14      14
      15      14
      16      14
   }

   method 'testBooleanContract (ZZ)Ljava/lang/Boolean;' {
      1      25
      2      25
      5      25
      6      25
      9      25
      d      25
      e      25
      11      25
      12      25
      1a      25
      1d      25
   }

   method 'testTypeContract (Ljava/lang/Object;)I' {
      1      33
      5      33
      c      34
      d      34
      e      34
      f      34
      10      34
      14      34
      15      36
      16      36
      17      36
      18      36
      19      36
      1a      36
      1b      36
      1c      36
   }

   method 'testFunctionalContract (Lkotlin/jvm/functions/Function0;)I' {
      7      45
      8      45
      9      45
      a      45
      b      45
      c      45
      d      45
      e      45
      f      45
      10      45
      11      45
      12      45
      13      45
   }

   method 'testFunctionalContract2 (Lkotlin/jvm/functions/Function0;Z)I' {
      7      53
      8      53
      b      53
      c      53
      d      53
      e      53
      f      53
      10      53
      11      53
      12      53
      13      53
      14      53
      15      53
      16      53
      1a      53
      1b      53
   }

   method 'testFunctionalContract3 (Lkotlin/jvm/functions/Function0;I)I' {
      b      61
      c      61
      10      61
      11      61
      12      61
      13      61
      14      62
      15      62
      16      62
      17      63
      18      63
      19      63
      1a      63
      1b      63
      1c      63
      1d      63
      1e      63
      1f      65
      20      65
      21      65
      22      65
      23      65
      24      65
      25      65
      29      66
      2a      66
      2b      66
      2c      66
      2d      66
      2e      66
      2f      66
      30      66
      31      66
      32      66
      3e      67
      3f      67
      40      67
      41      67
      42      67
      43      67
      44      67
      45      67
      46      67
      47      67
      48      67
      49      67
      4e      67
      4f      67
      51      67
      52      67
      56      70
      57      70
      58      70
   }
}

Lines mapping:
13 <-> 12
14 <-> 15
24 <-> 26
31 <-> 34
32 <-> 37
39 <-> 46
46 <-> 54
53 <-> 71
Not mapped:
10
18
28
36
43
50
57
