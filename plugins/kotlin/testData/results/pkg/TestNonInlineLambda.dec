package pkg

import java.util.Iterator
import kotlin.jvm.internal.Ref.IntRef
import kotlin.jvm.internal.Ref.ObjectRef

open class TestNonInlineLambda {
   private int intField;
   private String stringField = "";
   private int privateIntField;
   private String privateStringField = "";

   fun testCaptureInt(x: Int) {
      this.execute(new <undefinedtype>(x));// 7 8
   }// 11

   fun testCaptureObject(x: String) {
      this.execute(new <undefinedtype>(x));// 14 15
   }// 18

   fun testCaptureIntIterationValue(x: Iterable<Integer>) {
      var var2: Iterator = x.iterator();// 21

      while(var2.hasNext()) {
         this.execute(new <undefinedtype>((var2.next() as Number).intValue()));// 22
      }
   }// 26

   fun testCaptureObjectIterationValue(x: Iterable<String>) {
      for(String i : x) {// 29
         this.execute(new <undefinedtype>(i));// 30
      }
   }// 34

   fun testCaptureMutableInt(x: Int) {
      var y: IntRef = new IntRef();// 37
      y.element = x;
      this.execute(new <undefinedtype>(y));// 38
      var var3: Int = y.element++;// 41
      this.execute(new <undefinedtype>(y));// 42
      y.element *= 500;// 45
      this.execute(new <undefinedtype>(y));// 46
      y.element = 100;// 49
      this.execute(new <undefinedtype>(y));// 50
      y.element += x;// 53
      this.execute(new <undefinedtype>(y));// 54
   }// 57

   fun testCaptureMutableObject(x: String) {
      var y: ObjectRef = new ObjectRef();// 60
      y.element = x;
      this.execute(new <undefinedtype>(y));// 61
      y.element = y.element + "!!";// 64
      this.execute(new <undefinedtype>(y));// 65
      y.element = "" + y.element + y.element + y.element;// 68
      this.execute(new <undefinedtype>(y));// 69
      y.element = "Hello: ";// 72
      this.execute(new <undefinedtype>(y));// 73
      y.element = y.element + x;// 76
      this.execute(new <undefinedtype>(y));// 77
   }// 80

   fun testCaptureAndMutateInt(x: Int) {
      var y: IntRef = new IntRef();// 83
      this.execute(new <undefinedtype>(y));// 84
      y.element = 5 + x;// 89
      this.execute(new <undefinedtype>(y));// 90
   }// 95

   fun testCaptureAndMutateString(x: String) {
      var y: ObjectRef = new ObjectRef();// 98
      y.element = "";
      this.execute(new <undefinedtype>(y));// 99
      y.element = "Hello: " + x;// 105
      this.execute(new <undefinedtype>(y));// 106
   }// 112

   fun getIntField(): Int  {
      return this.intField;
   }

   fun setIntField(var1: Int) {
      this.intField = var1;// 114
   }

   fun testCapturePublicMutableIntField() {
      this.execute(new <undefinedtype>(this));// 117
   }// 118

   fun getStringField(): String  {
      return this.stringField;
   }

   fun setStringField(var1: String) {
      this.stringField = var1;// 120
   }

   fun testCapturePublicMutableStringField() {
      this.execute(new <undefinedtype>(this));// 123
   }// 124

   fun testCapturePrivateMutableIntField() {
      this.execute(new <undefinedtype>(this));// 129
   }// 130

   fun testCapturePrivateMutableStringField() {
      this.execute(new <undefinedtype>(this));// 135
   }// 136

   open fun execute(block: () -> Unit) {
   }// 141

   @JvmStatic
   @JvmSynthetic
   fun `access$getPrivateIntField$p`(`$this`: TestNonInlineLambda): Int  {
      return `$this`.privateIntField;
   }

   @JvmStatic
   @JvmSynthetic
   fun `access$setPrivateIntField$p`(`$this`: TestNonInlineLambda, var1: Int) {
      `$this`.privateIntField = var1;
   }

   @JvmStatic
   @JvmSynthetic
   fun `access$setPrivateStringField$p`(`$this`: TestNonInlineLambda, var1: String) {
      `$this`.privateStringField = var1;
   }

   @JvmStatic
   @JvmSynthetic
   fun `access$getPrivateStringField$p`(`$this`: TestNonInlineLambda): String  {
      return `$this`.privateStringField;// 3
   }
}

class 'pkg/TestNonInlineLambda' {
   method 'testCaptureInt (I)V' {
      0      13
      2      13
      7      13
      b      13
      c      13
      d      13
      e      13
      f      13
      10      13
      11      14
   }

   method 'testCaptureObject (Ljava/lang/String;)V' {
      6      17
      8      17
      d      17
      11      17
      12      17
      13      17
      14      17
      15      17
      16      17
      17      18
   }

   method 'testCaptureIntIterationValue (Ljava/lang/Iterable;)V' {
      6      21
      7      21
      8      21
      9      21
      a      21
      b      21
      c      21
      d      23
      e      23
      f      23
      10      23
      11      23
      12      23
      16      24
      17      24
      18      24
      19      24
      1a      24
      1b      24
      1c      24
      1d      24
      1e      24
      1f      24
      20      24
      21      24
      23      24
      28      24
      2c      24
      2d      24
      2e      24
      2f      24
      30      24
      31      24
      35      26
   }

   method 'testCaptureObjectIterationValue (Ljava/lang/Iterable;)V' {
      6      29
      7      29
      8      29
      9      29
      a      29
      b      29
      c      29
      16      29
      17      29
      18      29
      19      29
      1a      29
      1b      29
      1c      29
      1d      29
      1e      29
      1f      29
      20      30
      25      30
      29      30
      2a      30
      2b      30
      2c      30
      2d      30
      2e      30
      32      32
   }

   method 'testCaptureMutableInt (I)V' {
      7      35
      8      36
      9      36
      a      36
      b      36
      c      36
      d      37
      12      37
      16      37
      17      37
      18      37
      19      37
      1a      37
      1b      37
      1c      38
      1d      38
      1e      38
      1f      38
      20      38
      24      38
      28      39
      2d      39
      31      39
      32      39
      33      39
      34      39
      35      39
      36      39
      37      40
      3c      40
      3d      40
      3e      40
      40      40
      41      40
      42      40
      43      41
      48      41
      4c      41
      4d      41
      4e      41
      4f      41
      50      41
      51      41
      52      42
      53      42
      54      42
      55      42
      56      42
      57      42
      58      43
      5d      43
      61      43
      62      43
      63      43
      64      43
      65      43
      66      43
      67      44
      6c      44
      6e      44
      6f      44
      70      44
      71      45
      76      45
      7a      45
      7b      45
      7c      45
      7d      45
      7e      45
      7f      45
      80      46
   }

   method 'testCaptureMutableObject (Ljava/lang/String;)V' {
      d      49
      e      50
      f      50
      10      50
      11      50
      12      50
      13      51
      18      51
      1c      51
      1d      51
      1e      51
      1f      51
      20      51
      21      51
      22      52
      23      52
      24      52
      25      52
      26      52
      27      52
      28      52
      29      52
      2a      52
      2b      52
      2c      52
      2d      52
      2e      52
      2f      53
      34      53
      38      53
      39      53
      3a      53
      3b      53
      3c      53
      3d      53
      3e      54
      3f      54
      40      54
      41      54
      42      54
      43      54
      44      54
      45      54
      46      54
      47      54
      48      54
      49      54
      4a      54
      4b      54
      4c      54
      4d      54
      4e      54
      4f      54
      50      54
      51      54
      52      54
      53      55
      58      55
      5c      55
      5d      55
      5e      55
      5f      55
      60      55
      61      55
      62      56
      63      56
      64      56
      65      56
      66      56
      67      56
      68      57
      6d      57
      71      57
      72      57
      73      57
      74      57
      75      57
      76      57
      77      58
      78      58
      79      58
      7a      58
      7b      58
      7c      58
      7d      58
      7e      58
      7f      58
      80      58
      81      58
      82      58
      83      58
      84      58
      85      59
      8a      59
      8e      59
      8f      59
      90      59
      91      59
      92      59
      93      59
      94      60
   }

   method 'testCaptureAndMutateInt (I)V' {
      7      63
      8      64
      d      64
      11      64
      12      64
      13      64
      14      64
      15      64
      16      64
      17      65
      18      65
      19      65
      1a      65
      1b      65
      1c      65
      1d      65
      1e      66
      23      66
      27      66
      28      66
      29      66
      2a      66
      2b      66
      2c      66
      2d      67
   }

   method 'testCaptureAndMutateString (Ljava/lang/String;)V' {
      d      70
      e      71
      f      71
      10      71
      11      71
      12      71
      13      71
      14      72
      19      72
      1d      72
      1e      72
      1f      72
      20      72
      21      72
      22      72
      23      73
      24      73
      25      73
      26      73
      27      73
      28      73
      29      73
      2a      73
      2b      73
      2c      73
      2d      74
      32      74
      36      74
      37      74
      38      74
      39      74
      3a      74
      3b      74
      3c      75
   }

   method 'getIntField ()I' {
      0      78
      1      78
      2      78
      3      78
      4      78
   }

   method 'setIntField (I)V' {
      0      82
      1      82
      2      82
      3      82
      4      82
      5      83
   }

   method 'testCapturePublicMutableIntField ()V' {
      0      86
      5      86
      9      86
      a      86
      b      86
      c      86
      d      86
      e      86
      f      87
   }

   method 'getStringField ()Ljava/lang/String;' {
      0      90
      1      90
      2      90
      3      90
      4      90
   }

   method 'setStringField (Ljava/lang/String;)V' {
      6      94
      7      94
      8      94
      9      94
      a      94
      b      95
   }

   method 'testCapturePublicMutableStringField ()V' {
      0      98
      5      98
      9      98
      a      98
      b      98
      c      98
      d      98
      e      98
      f      99
   }

   method 'testCapturePrivateMutableIntField ()V' {
      0      102
      5      102
      9      102
      a      102
      b      102
      c      102
      d      102
      e      102
      f      103
   }

   method 'testCapturePrivateMutableStringField ()V' {
      0      106
      5      106
      9      106
      a      106
      b      106
      c      106
      d      106
      e      106
      f      107
   }

   method 'execute (Lkotlin/jvm/functions/Function0;)V' {
      6      110
   }

   method 'access$getPrivateIntField$p (Lpkg/TestNonInlineLambda;)I' {
      0      115
      1      115
      2      115
      3      115
      4      115
   }

   method 'access$setPrivateIntField$p (Lpkg/TestNonInlineLambda;I)V' {
      0      121
      1      121
      2      121
      3      121
      4      121
      5      122
   }

   method 'access$setPrivateStringField$p (Lpkg/TestNonInlineLambda;Ljava/lang/String;)V' {
      0      127
      1      127
      2      127
      3      127
      4      127
      5      128
   }

   method 'access$getPrivateStringField$p (Lpkg/TestNonInlineLambda;)Ljava/lang/String;' {
      0      133
      1      133
      2      133
      3      133
      4      133
   }
}

Lines mapping:
3 <-> 134
7 <-> 14
8 <-> 14
11 <-> 15
14 <-> 18
15 <-> 18
18 <-> 19
21 <-> 22
22 <-> 25
26 <-> 27
29 <-> 30
30 <-> 31
34 <-> 33
37 <-> 36
38 <-> 38
41 <-> 39
42 <-> 40
45 <-> 41
46 <-> 42
49 <-> 43
50 <-> 44
53 <-> 45
54 <-> 46
57 <-> 47
60 <-> 50
61 <-> 52
64 <-> 53
65 <-> 54
68 <-> 55
69 <-> 56
72 <-> 57
73 <-> 58
76 <-> 59
77 <-> 60
80 <-> 61
83 <-> 64
84 <-> 65
89 <-> 66
90 <-> 67
95 <-> 68
98 <-> 71
99 <-> 73
105 <-> 74
106 <-> 75
112 <-> 76
114 <-> 83
117 <-> 87
118 <-> 88
120 <-> 95
123 <-> 99
124 <-> 100
129 <-> 103
130 <-> 104
135 <-> 107
136 <-> 108
141 <-> 111
