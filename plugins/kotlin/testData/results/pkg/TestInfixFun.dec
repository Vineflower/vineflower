package pkg

import kotlin.text.StringsKt;

class TestInfixFun {
   fun test() {
      System.out.println(test$times(2, "Bye "));// 7
   }// 8

   fun mult($this$mult: Int, str: String): String  {
      return StringsKt.repeat((CharSequence)str, $this$mult);// 10
   }

   fun testOuter() {
      System.out.println(this.mult(2, "Bye "));// 14
   }// 15

   fun testDuplicate() {
      System.out.println(testDuplicate$mult(2, "Bye "));// 20
   }// 21

   @JvmStatic
   fun `test$times`($this$test_u24times: Int, str: String): String  {
      return StringsKt.repeat((CharSequence)str, $this$test_u24times);// 5
   }

   @JvmStatic
   fun `testDuplicate$mult`($this$testDuplicate_u24mult: Int, str: String): String  {
      return StringsKt.repeat((CharSequence)str, $this$testDuplicate_u24mult + 1);// 18
   }
}

class 'pkg/TestInfixFun' {
   method 'test ()V' {
      0      6
      1      6
      2      6
      3      6
      4      6
      5      6
      6      6
      7      6
      8      6
      a      6
      b      6
      c      6
      d      7
   }

   method 'mult (ILjava/lang/String;)Ljava/lang/String;' {
      6      10
      7      10
      8      10
      9      10
      a      10
      b      10
      c      10
      d      10
      e      10
   }

   method 'testOuter ()V' {
      0      14
      1      14
      2      14
      3      14
      4      14
      5      14
      6      14
      7      14
      8      14
      9      14
      b      14
      c      14
      d      14
      e      15
   }

   method 'testDuplicate ()V' {
      0      18
      1      18
      2      18
      3      18
      4      18
      5      18
      6      18
      7      18
      8      18
      a      18
      b      18
      c      18
      d      19
   }

   method 'test$times (ILjava/lang/String;)Ljava/lang/String;' {
      0      23
      1      23
      2      23
      3      23
      4      23
      5      23
      6      23
      7      23
      8      23
   }

   method 'testDuplicate$mult (ILjava/lang/String;)Ljava/lang/String;' {
      0      28
      1      28
      2      28
      3      28
      4      28
      5      28
      6      28
      7      28
      8      28
      9      28
      a      28
   }
}

Lines mapping:
5 <-> 24
7 <-> 7
8 <-> 8
10 <-> 11
14 <-> 15
15 <-> 16
18 <-> 29
20 <-> 19
21 <-> 20
