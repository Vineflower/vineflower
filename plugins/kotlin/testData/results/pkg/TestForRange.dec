package pkg

import kotlin.internal.ProgressionUtilKt

class TestForRange {
   fun testInt() {
      for(int i = 1; i < 11; ++i) {// 5
         System.out.println(i);// 6
      }
   }// 8

   fun testChar() {
      for(char c = 'a'; c < '{'; ++c) {// 11
         System.out.println(c);// 12
      }
   }// 14

   fun testIntStep() {
      var i: Int = 1;
      var var2: Int = ProgressionUtilKt.getProgressionLastElement(1, 10, 2);
      if (1 <= var2) {
         while(true) {
            System.out.println(i);// 18
            if (i == var2) {// 17
               break;
            }

            i += 2;
         }
      }
   }// 20

   fun testIntStepX(x: Int) {
      if (x <= 0) {
         throw new IllegalArgumentException("Step must be positive, was: " + x + ".");
      } else {
         var i: Int = 1;
         var var3: Int = ProgressionUtilKt.getProgressionLastElement(1, 100, x);
         if (1 <= var3) {
            while(true) {
               System.out.println(i);// 24
               if (i == var3) {// 23
                  break;
               }

               i += x;
            }
         }
      }
   }// 26

   fun testIntDownTo() {
      for(int i = 10; 0 < i; --i) {// 29
         System.out.println(i);// 30
      }
   }// 32

   fun testIntDownToStep() {
      var i: Int = 10;
      var var2: Int = ProgressionUtilKt.getProgressionLastElement(10, 1, -2);
      if (var2 <= 10) {
         while(true) {
            System.out.println(i);// 36
            if (i == var2) {// 35
               break;
            }

            i -= 2;
         }
      }
   }// 38

   fun testIntDownToStepX(x: Int) {
      if (x <= 0) {
         throw new IllegalArgumentException("Step must be positive, was: " + x + ".");
      } else {
         var var2: Int = -x;
         var i: Int = 100;
         var var4: Int = ProgressionUtilKt.getProgressionLastElement(100, 1, var2);
         if (var4 <= 100) {
            while(true) {
               System.out.println(i);// 42
               if (i == var4) {// 41
                  break;
               }

               i += var2;
            }
         }
      }
   }// 44

   fun testUntil() {
      for(int i = 1; i < 10; ++i) {// 47
         System.out.println(i);// 48
      }
   }// 50

   fun testUntilStep() {
      var var1: IntProgression = RangesKt.step(RangesKt.until(1, 100) as IntProgression, 2);
      var i: Int = var1.getFirst();
      var var3: Int = var1.getLast();
      var var4: Int = var1.getStep();
      if (var4 > 0 && i <= var3 || var4 < 0 && var3 <= i) {
         while(true) {
            System.out.println(i);// 54
            if (i == var3) {// 53
               break;
            }

            i += var4;
         }
      }
   }// 56

   fun testUntilStepX(x: Int) {
      var var2: IntProgression = RangesKt.step(RangesKt.until(1, 100) as IntProgression, x);
      var i: Int = var2.getFirst();
      var var4: Int = var2.getLast();
      var var5: Int = var2.getStep();
      if (var5 > 0 && i <= var4 || var5 < 0 && var4 <= i) {
         while(true) {
            System.out.println(i);// 60
            if (i == var4) {// 59
               break;
            }

            i += var5;
         }
      }
   }// 62

   fun testIntY(x: Int, y: Int) {
      var i: Int = x;
      if (x <= y) {
         while(true) {
            System.out.println(i);// 66
            if (i == y) {// 65
               break;
            }

            ++i;
         }
      }
   }// 68

   fun testIntYStep(x: Int, y: Int) {
      var i: Int = x;
      var var4: Int = ProgressionUtilKt.getProgressionLastElement(x, y, 2);
      if (x <= var4) {
         while(true) {
            System.out.println(i);// 72
            if (i == var4) {// 71
               break;
            }

            i += 2;
         }
      }
   }// 74

   fun testIntYStepX(x: Int, y: Int, z: Int) {
      if (z <= 0) {
         throw new IllegalArgumentException("Step must be positive, was: " + z + ".");
      } else {
         var i: Int = x;
         var var5: Int = ProgressionUtilKt.getProgressionLastElement(x, y, z);
         if (x <= var5) {
            while(true) {
               System.out.println(i);// 78
               if (i == var5) {// 77
                  break;
               }

               i += z;
            }
         }
      }
   }// 80
}

class 'pkg/TestForRange' {
   method 'testInt ()V' {
      0      6
      1      6
      2      6
      3      6
      4      6
      5      6
      8      7
      9      7
      a      7
      b      7
      c      7
      d      7
      e      7
      f      6
      10      6
      11      6
      15      9
   }

   method 'testChar ()V' {
      0      12
      1      12
      2      12
      3      12
      4      12
      5      12
      6      12
      9      13
      a      13
      b      13
      c      13
      d      13
      e      13
      f      13
      10      12
      12      12
      18      15
   }

   method 'testIntStep ()V' {
      0      18
      1      18
      2      19
      3      19
      4      19
      5      19
      6      19
      7      19
      8      19
      9      19
      a      20
      b      20
      c      20
      f      22
      10      22
      11      22
      12      22
      13      22
      14      22
      15      22
      16      23
      17      23
      18      23
      1b      27
      1c      27
      1d      27
      21      30
   }

   method 'testIntStepX (I)V' {
      0      33
      1      33
      8      34
      9      34
      a      34
      b      34
      c      34
      d      34
      11      34
      12      36
      13      36
      14      37
      15      37
      16      37
      17      37
      18      37
      19      37
      1a      37
      1b      37
      1c      38
      1d      38
      1e      38
      21      40
      22      40
      23      40
      24      40
      25      40
      26      40
      27      40
      28      41
      29      41
      2a      41
      2e      45
      30      45
      34      49
   }

   method 'testIntDownTo ()V' {
      0      52
      1      52
      2      52
      3      52
      4      52
      5      52
      8      53
      9      53
      a      53
      b      53
      c      53
      d      53
      e      53
      f      52
      10      52
      11      52
      15      55
   }

   method 'testIntDownToStep ()V' {
      0      58
      1      58
      2      58
      3      59
      4      59
      5      59
      6      59
      7      59
      8      59
      9      59
      a      59
      b      59
      c      60
      d      60
      e      60
      11      62
      12      62
      13      62
      14      62
      15      62
      16      62
      17      62
      18      63
      19      63
      1a      63
      1d      67
      1e      67
      1f      67
      23      70
   }

   method 'testIntDownToStepX (I)V' {
      0      73
      1      73
      8      74
      9      74
      a      74
      b      74
      c      74
      d      74
      11      74
      12      76
      13      76
      14      76
      15      77
      16      77
      17      77
      18      78
      19      78
      1a      78
      1b      78
      1c      78
      1d      78
      1e      78
      1f      78
      20      78
      21      79
      22      79
      23      79
      24      79
      27      81
      28      81
      29      81
      2a      81
      2b      81
      2c      81
      2d      81
      2e      82
      2f      82
      30      82
      31      82
      35      86
      37      86
      3b      90
   }

   method 'testUntil ()V' {
      0      93
      1      93
      2      93
      3      93
      4      93
      5      93
      8      94
      9      94
      a      94
      b      94
      c      94
      d      94
      e      94
      f      93
      10      93
      11      93
      15      96
   }

   method 'testUntilStep ()V' {
      0      99
      1      99
      2      99
      3      99
      4      99
      5      99
      6      99
      7      99
      8      99
      9      99
      a      99
      b      99
      c      99
      d      99
      e      100
      f      100
      10      100
      11      100
      12      100
      13      101
      14      101
      15      101
      16      101
      17      101
      18      102
      19      102
      1a      102
      1b      102
      1c      102
      1d      102
      1e      103
      1f      103
      20      103
      23      103
      24      103
      25      103
      28      103
      29      103
      2a      103
      2d      103
      2e      103
      2f      103
      32      105
      33      105
      34      105
      35      105
      36      105
      37      105
      38      105
      39      106
      3a      106
      3b      106
      3f      110
      40      110
      42      110
      46      113
   }

   method 'testUntilStepX (I)V' {
      0      116
      1      116
      2      116
      3      116
      4      116
      5      116
      6      116
      7      116
      8      116
      9      116
      a      116
      b      116
      c      116
      d      116
      e      117
      f      117
      10      117
      11      117
      12      117
      13      118
      14      118
      15      118
      16      118
      17      118
      18      118
      19      119
      1a      119
      1b      119
      1c      119
      1d      119
      1e      119
      1f      120
      20      120
      21      120
      24      120
      25      120
      26      120
      27      120
      2a      120
      2b      120
      2c      120
      2f      120
      30      120
      31      120
      32      120
      35      122
      36      122
      37      122
      38      122
      39      122
      3a      122
      3b      122
      3c      123
      3d      123
      3e      123
      3f      123
      43      127
      44      127
      46      127
      4a      130
   }

   method 'testIntY (II)V' {
      0      133
      1      133
      2      134
      3      134
      4      134
      7      136
      8      136
      9      136
      a      136
      b      136
      c      136
      d      136
      e      137
      f      137
      10      137
      13      141
      14      141
      15      141
      19      144
   }

   method 'testIntYStep (II)V' {
      0      147
      1      147
      2      148
      3      148
      4      148
      5      148
      6      148
      7      148
      8      148
      9      148
      a      149
      b      149
      c      149
      d      149
      10      151
      11      151
      12      151
      13      151
      14      151
      15      151
      16      151
      17      152
      18      152
      19      152
      1a      152
      1d      156
      1e      156
      1f      156
      23      159
   }

   method 'testIntYStepX (III)V' {
      0      162
      1      162
      8      163
      9      163
      a      163
      b      163
      c      163
      d      163
      11      163
      12      165
      13      165
      14      165
      15      166
      16      166
      17      166
      18      166
      19      166
      1a      166
      1b      166
      1c      166
      1d      167
      1e      167
      1f      167
      20      167
      21      167
      24      169
      25      169
      26      169
      27      169
      28      169
      29      169
      2a      169
      2b      169
      2c      170
      2d      170
      2e      170
      2f      170
      30      170
      35      174
      37      174
      38      174
      3c      178
   }
}

Lines mapping:
5 <-> 7
6 <-> 8
8 <-> 10
11 <-> 13
12 <-> 14
14 <-> 16
17 <-> 24
18 <-> 23
20 <-> 31
23 <-> 42
24 <-> 41
26 <-> 50
29 <-> 53
30 <-> 54
32 <-> 56
35 <-> 64
36 <-> 63
38 <-> 71
41 <-> 83
42 <-> 82
44 <-> 91
47 <-> 94
48 <-> 95
50 <-> 97
53 <-> 107
54 <-> 106
56 <-> 114
59 <-> 124
60 <-> 123
62 <-> 131
65 <-> 138
66 <-> 137
68 <-> 145
71 <-> 153
72 <-> 152
74 <-> 160
77 <-> 171
78 <-> 170
80 <-> 179
