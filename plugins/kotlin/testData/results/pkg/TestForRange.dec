package pkg

import kotlin.internal.ProgressionUtilKt

public class TestForRange {
   public fun testInt() {
      for (i: Int in 1..10) {// 5
         System.out.println(i);// 6
      }
   }// 8

   public fun testChar() {
      for (c: Char in 'a'..'z') {// 11
         System.out.println(c);// 12
      }
   }// 14

   public fun testIntStep() {
      var i: Int = 1;
      val var2: Int = ProgressionUtilKt.getProgressionLastElement(1, 10, 2);
      if (1 <= var2) {
         while (true) {
            System.out.println(i);// 18
            if (i == var2) {// 17
               break;
            }

            i += 2;
         }
      }
   }// 20

   public fun testIntStepX(x: Int) {
      if (x <= 0) {
         throw new IllegalArgumentException("Step must be positive, was: $x.");
      } else {
         var i: Int = 1;
         val var3: Int = ProgressionUtilKt.getProgressionLastElement(1, 100, x);
         if (1 <= var3) {
            while (true) {
               System.out.println(i);// 24
               if (i == var3) {// 23
                  break;
               }

               i += x;
            }
         }
      }
   }// 26

   public fun testIntDownTo() {
      // $VF: Unable to resugar Kotlin loop from Java for loop
      int i = 10
      while (true) {
         if (0 < i) break
         System.out.println(i);// 30

         i--// 29
      }
   }// 32

   public fun testIntDownToStep() {
      var i: Int = 10;
      val var2: Int = ProgressionUtilKt.getProgressionLastElement(10, 1, -2);
      if (var2 <= 10) {
         while (true) {
            System.out.println(i);// 36
            if (i == var2) {// 35
               break;
            }

            i -= 2;
         }
      }
   }// 38

   public fun testIntDownToStepX(x: Int) {
      if (x <= 0) {
         throw new IllegalArgumentException("Step must be positive, was: $x.");
      } else {
         val var2: Int = -x;
         var i: Int = 100;
         val var4: Int = ProgressionUtilKt.getProgressionLastElement(100, 1, var2);
         if (var4 <= 100) {
            while (true) {
               System.out.println(i);// 42
               if (i == var4) {// 41
                  break;
               }

               i += var2;
            }
         }
      }
   }// 44

   public fun testUntil() {
      for (i: Int in 1..9) {// 47
         System.out.println(i);// 48
      }
   }// 50

   public fun testUntilStep() {
      val var1: IntProgression = RangesKt.step(RangesKt.until(1, 100) as IntProgression, 2);
      var i: Int = var1.getFirst();
      val var3: Int = var1.getLast();
      val var4: Int = var1.getStep();
      if (var4 > 0 && i <= var3 || var4 < 0 && var3 <= i) {
         while (true) {
            System.out.println(i);// 54
            if (i == var3) {// 53
               break;
            }

            i += var4;
         }
      }
   }// 56

   public fun testUntilStepX(x: Int) {
      val var2: IntProgression = RangesKt.step(RangesKt.until(1, 100) as IntProgression, x);
      var i: Int = var2.getFirst();
      val var4: Int = var2.getLast();
      val var5: Int = var2.getStep();
      if (var5 > 0 && i <= var4 || var5 < 0 && var4 <= i) {
         while (true) {
            System.out.println(i);// 60
            if (i == var4) {// 59
               break;
            }

            i += var5;
         }
      }
   }// 62

   public fun testIntY(x: Int, y: Int) {
      var i: Int = x;
      if (x <= y) {
         while (true) {
            System.out.println(i);// 66
            if (i == y) {// 65
               break;
            }

            i++;
         }
      }
   }// 68

   public fun testIntYStep(x: Int, y: Int) {
      var i: Int = x;
      val var4: Int = ProgressionUtilKt.getProgressionLastElement(x, y, 2);
      if (x <= var4) {
         while (true) {
            System.out.println(i);// 72
            if (i == var4) {// 71
               break;
            }

            i += 2;
         }
      }
   }// 74

   public fun testIntYStepX(x: Int, y: Int, z: Int) {
      if (z <= 0) {
         throw new IllegalArgumentException("Step must be positive, was: $z.");
      } else {
         var i: Int = x;
         val var5: Int = ProgressionUtilKt.getProgressionLastElement(x, y, z);
         if (x <= var5) {
            while (true) {
               System.out.println(i);// 78
               if (i == var5) {// 77
                  break;
               }

               i += z;
            }
         }
      }
   }// 80
}

class 'pkg/TestForRange' {
   method 'testInt ()V' {
      0      6
      1      6
      3      6
      4      6
      8      7
      9      7
      a      7
      b      7
      c      7
      d      7
      e      7
      15      9
   }

   method 'testChar ()V' {
      0      12
      1      12
      2      12
      4      12
      5      12
      9      13
      a      13
      b      13
      c      13
      d      13
      e      13
      f      13
      18      15
   }

   method 'testIntStep ()V' {
      0      18
      1      18
      2      19
      3      19
      4      19
      5      19
      6      19
      7      19
      8      19
      9      19
      a      20
      b      20
      c      20
      d      20
      e      20
      f      22
      10      22
      11      22
      12      22
      13      22
      14      22
      15      22
      16      23
      17      23
      18      23
      19      23
      1a      23
      1b      27
      1c      27
      1d      27
      21      30
   }

   method 'testIntStepX (I)V' {
      0      33
      1      33
      2      33
      3      33
      8      34
      9      34
      a      34
      b      34
      c      34
      d      34
      11      34
      12      36
      13      36
      14      37
      15      37
      16      37
      17      37
      18      37
      19      37
      1a      37
      1b      37
      1c      38
      1d      38
      1e      38
      1f      38
      20      38
      21      40
      22      40
      23      40
      24      40
      25      40
      26      40
      27      40
      28      41
      29      41
      2a      41
      2b      41
      2c      41
      2e      45
      30      45
      34      49
   }

   method 'testIntDownTo ()V' {
      0      53
      1      53
      2      53
      3      55
      4      55
      5      55
      6      55
      7      55
      8      56
      9      56
      a      56
      b      56
      c      56
      d      56
      e      56
      f      58
      10      58
      11      58
      15      60
   }

   method 'testIntDownToStep ()V' {
      0      63
      1      63
      2      63
      3      64
      4      64
      5      64
      6      64
      7      64
      8      64
      9      64
      a      64
      b      64
      c      65
      d      65
      e      65
      f      65
      10      65
      11      67
      12      67
      13      67
      14      67
      15      67
      16      67
      17      67
      18      68
      19      68
      1a      68
      1b      68
      1c      68
      1d      72
      1e      72
      1f      72
      23      75
   }

   method 'testIntDownToStepX (I)V' {
      0      78
      1      78
      2      78
      3      78
      8      79
      9      79
      a      79
      b      79
      c      79
      d      79
      11      79
      12      81
      13      81
      14      81
      15      82
      16      82
      17      82
      18      83
      19      83
      1a      83
      1b      83
      1c      83
      1d      83
      1e      83
      1f      83
      20      83
      21      84
      22      84
      23      84
      24      84
      25      84
      26      84
      27      86
      28      86
      29      86
      2a      86
      2b      86
      2c      86
      2d      86
      2e      87
      2f      87
      30      87
      31      87
      32      87
      33      87
      35      91
      37      91
      3b      95
   }

   method 'testUntil ()V' {
      0      98
      1      98
      3      98
      4      98
      8      99
      9      99
      a      99
      b      99
      c      99
      d      99
      e      99
      15      101
   }

   method 'testUntilStep ()V' {
      0      104
      1      104
      2      104
      3      104
      4      104
      5      104
      6      104
      7      104
      8      104
      9      104
      a      104
      b      104
      c      104
      d      104
      e      105
      f      105
      10      105
      11      105
      12      105
      13      106
      14      106
      15      106
      16      106
      17      106
      18      107
      19      107
      1a      107
      1b      107
      1c      107
      1d      107
      1e      108
      1f      108
      20      108
      21      108
      22      108
      23      108
      24      108
      25      108
      26      108
      27      108
      28      108
      29      108
      2a      108
      2b      108
      2c      108
      2d      108
      2e      108
      2f      108
      30      108
      31      108
      32      110
      33      110
      34      110
      35      110
      36      110
      37      110
      38      110
      39      111
      3a      111
      3b      111
      3c      111
      3d      111
      3f      115
      40      115
      42      115
      46      118
   }

   method 'testUntilStepX (I)V' {
      0      121
      1      121
      2      121
      3      121
      4      121
      5      121
      6      121
      7      121
      8      121
      9      121
      a      121
      b      121
      c      121
      d      121
      e      122
      f      122
      10      122
      11      122
      12      122
      13      123
      14      123
      15      123
      16      123
      17      123
      18      123
      19      124
      1a      124
      1b      124
      1c      124
      1d      124
      1e      124
      1f      125
      20      125
      21      125
      22      125
      23      125
      24      125
      25      125
      26      125
      27      125
      28      125
      29      125
      2a      125
      2b      125
      2c      125
      2d      125
      2e      125
      2f      125
      30      125
      31      125
      32      125
      33      125
      34      125
      35      127
      36      127
      37      127
      38      127
      39      127
      3a      127
      3b      127
      3c      128
      3d      128
      3e      128
      3f      128
      40      128
      41      128
      43      132
      44      132
      46      132
      4a      135
   }

   method 'testIntY (II)V' {
      0      138
      1      138
      2      139
      3      139
      4      139
      5      139
      6      139
      7      141
      8      141
      9      141
      a      141
      b      141
      c      141
      d      141
      e      142
      f      142
      10      142
      11      142
      12      142
      13      146
      14      146
      15      146
      19      149
   }

   method 'testIntYStep (II)V' {
      0      152
      1      152
      2      153
      3      153
      4      153
      5      153
      6      153
      7      153
      8      153
      9      153
      a      154
      b      154
      c      154
      d      154
      e      154
      f      154
      10      156
      11      156
      12      156
      13      156
      14      156
      15      156
      16      156
      17      157
      18      157
      19      157
      1a      157
      1b      157
      1c      157
      1d      161
      1e      161
      1f      161
      23      164
   }

   method 'testIntYStepX (III)V' {
      0      167
      1      167
      2      167
      3      167
      8      168
      9      168
      a      168
      b      168
      c      168
      d      168
      11      168
      12      170
      13      170
      14      170
      15      171
      16      171
      17      171
      18      171
      19      171
      1a      171
      1b      171
      1c      171
      1d      172
      1e      172
      1f      172
      20      172
      21      172
      22      172
      23      172
      24      174
      25      174
      26      174
      27      174
      28      174
      29      174
      2a      174
      2b      174
      2c      175
      2d      175
      2e      175
      2f      175
      30      175
      31      175
      32      175
      35      179
      37      179
      38      179
      3c      183
   }
}

Lines mapping:
5 <-> 7
6 <-> 8
8 <-> 10
11 <-> 13
12 <-> 14
14 <-> 16
17 <-> 24
18 <-> 23
20 <-> 31
23 <-> 42
24 <-> 41
26 <-> 50
29 <-> 59
30 <-> 57
32 <-> 61
35 <-> 69
36 <-> 68
38 <-> 76
41 <-> 88
42 <-> 87
44 <-> 96
47 <-> 99
48 <-> 100
50 <-> 102
53 <-> 112
54 <-> 111
56 <-> 119
59 <-> 129
60 <-> 128
62 <-> 136
65 <-> 143
66 <-> 142
68 <-> 150
71 <-> 158
72 <-> 157
74 <-> 165
77 <-> 176
78 <-> 175
80 <-> 184
