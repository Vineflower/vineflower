package pkg

import kotlin.jvm.functions.Function1
import kotlin.jvm.internal.Reflection
import kotlin.reflect.KFunction

class TestReflection {
   fun testClassReference() {
      System.out.println(Reflection.getOrCreateKotlinClass(TestReflection.class));// 5
      System.out.println(TestReflection::class.java);// 6
   }// 7

   fun testPrimitiveWrapper() {
      System.out.println(Reflection.getOrCreateKotlinClass(int.class));// 10
      System.out.println(Integer::class.javaObjectType);// 11
   }// 12

   fun testPrimitiveType() {
      System.out.println(Integer::class.javaPrimitiveType);// 15
   }// 16

   fun testInferredPrimitive() {
      System.out.println(Integer::class.javaPrimitiveType);// 19
   }// 20

   fun testFunctionReference() {
      var f: KFunction = <unknownclass>.INSTANCE as KFunction;// 23
      System.out.println(<unknownclass>.INSTANCE as KFunction);// 24
      (f as Function1).invoke(new TestReflection());// 25
   }// 26
}

class 'pkg/TestReflection' {
   method 'testClassReference ()V' {
      0      8
      1      8
      2      8
      3      8
      4      8
      6      8
      7      8
      8      8
      9      8
      a      8
      b      8
      c      8
      d      9
      e      9
      10      9
      11      9
      12      9
      13      9
      14      9
      15      9
      16      9
      17      10
   }

   method 'testPrimitiveWrapper ()V' {
      3      13
      4      13
      5      13
      7      13
      8      13
      9      13
      a      13
      b      13
      c      13
      d      13
      e      14
      f      14
      11      14
      12      14
      13      14
      14      14
      15      14
      16      14
      17      14
      18      15
   }

   method 'testPrimitiveType ()V' {
      4      18
      5      18
      6      18
      8      18
      9      18
      a      18
      b      19
   }

   method 'testInferredPrimitive ()V' {
      4      22
      5      22
      6      22
      8      22
      9      22
      a      22
      b      23
   }

   method 'testFunctionReference ()V' {
      0      26
      1      26
      2      26
      3      26
      4      26
      5      26
      6      26
      7      27
      8      27
      9      27
      a      27
      b      27
      c      27
      d      27
      e      28
      f      28
      10      28
      11      28
      19      28
      1a      28
      1b      28
      1c      28
      1d      28
      1f      29
   }
}

Lines mapping:
5 <-> 9
6 <-> 10
7 <-> 11
10 <-> 14
11 <-> 15
12 <-> 16
15 <-> 19
16 <-> 20
19 <-> 23
20 <-> 24
23 <-> 27
24 <-> 28
25 <-> 29
26 <-> 30
