package pkg

import kotlin.jvm.internal.Intrinsics

class TestWhen {
   fun testStatement(obj: Object) {
      if (Intrinsics.areEqual(obj, 1)) {// 5 6
         System.out.println("1");
      } else if (Intrinsics.areEqual(obj, "2")) {// 7
         System.out.println("2");
      } else if (obj is Double) {// 8
         System.out.println("Double");
      } else if (obj !is Long) {// 9
         System.out.println("Not Long");
      } else {
         System.out.println("else");// 10
      }
   }// 12

   fun testExpression(obj: Object): Int  {
      return if (Intrinsics.areEqual(obj, 1)) 1 else (if (obj is Double) 2 else (if (Intrinsics.areEqual(obj, "4")) 4 else (if (obj !is Long) 3 else 5)));// 15 16 17 18 19 20
   }

   fun testStatement2(a: Object, b: Object) {
      if (Intrinsics.areEqual(a, 15)) {// 26
         System.out.println("a == 15");
      } else if (Intrinsics.areEqual(a, "!!")) {// 27
         System.out.println("a == !!");
      } else if (a is Integer) {// 28
         System.out.println("a is Int");
      } else if (a is String) {// 29
         System.out.println("a is String");
      } else if (b is Double) {// 30
         System.out.println("b is Double");
      } else if (a is Unit) {// 31
         System.out.println("a is Unit");
      } else {
         System.out.println("else");// 32
      }
   }// 34

   fun booleanNightmares(a: Boolean, b: Boolean, c: Boolean, d: Boolean, e: Boolean, f: Boolean, g: Boolean) {
      if (a == (b != c)) {// 37 38
         System.out.println("-_-");
      } else if (a == (b && !e)) {// 39
         System.out.println("xxx");
      } else if (a == (!a || d)) {// 40
         System.out.println("ohno");
      } else if (!a) {// 41
         System.out.println("NIGHTMARE");
      } else if (a == (g || e && f != c)) {// 42
         System.out.println("hello");
      } else {
         System.out.println("else");// 43
      }
   }// 45
}

class 'pkg/TestWhen' {
   method 'testStatement (Ljava/lang/Object;)V' {
      6      6
      8      6
      9      6
      a      6
      b      6
      c      6
      d      6
      e      6
      f      6
      10      6
      13      7
      14      7
      15      7
      16      7
      17      7
      19      7
      1a      7
      1b      7
      1f      8
      20      8
      21      8
      22      8
      23      8
      24      8
      25      8
      28      9
      29      9
      2a      9
      2b      9
      2c      9
      2e      9
      2f      9
      30      9
      34      10
      35      10
      36      10
      37      10
      38      10
      3b      11
      3c      11
      3d      11
      3e      11
      3f      11
      41      11
      42      11
      43      11
      47      12
      4b      12
      4e      13
      4f      13
      50      13
      51      13
      52      13
      54      13
      55      13
      56      13
      5a      15
      5b      15
      5c      15
      5d      15
      5e      15
      60      15
      63      17
   }

   method 'testExpression (Ljava/lang/Object;)I' {
      6      20
      8      20
      9      20
      a      20
      b      20
      c      20
      d      20
      e      20
      f      20
      10      20
      13      20
      17      20
      18      20
      19      20
      1a      20
      1b      20
      1e      20
      22      20
      23      20
      24      20
      25      20
      26      20
      27      20
      28      20
      2b      20
      2f      20
      33      20
      36      20
      3a      20
      3b      20
   }

   method 'testStatement2 (Ljava/lang/Object;Ljava/lang/Object;)V' {
      d      24
      e      24
      f      24
      10      24
      11      24
      12      24
      13      24
      14      24
      15      24
      16      24
      19      25
      1a      25
      1b      25
      1c      25
      1d      25
      1f      25
      20      25
      21      25
      25      26
      26      26
      27      26
      28      26
      29      26
      2a      26
      2b      26
      2e      27
      2f      27
      30      27
      31      27
      32      27
      34      27
      35      27
      36      27
      3a      28
      3b      28
      3c      28
      3d      28
      3e      28
      41      29
      42      29
      43      29
      44      29
      45      29
      47      29
      48      29
      49      29
      4d      30
      4e      30
      4f      30
      50      30
      51      30
      54      31
      55      31
      56      31
      57      31
      58      31
      5a      31
      5b      31
      5c      31
      60      32
      61      32
      62      32
      63      32
      64      32
      67      33
      68      33
      69      33
      6a      33
      6b      33
      6d      33
      6e      33
      6f      33
      73      34
      74      34
      75      34
      76      34
      77      34
      7a      35
      7b      35
      7c      35
      7d      35
      7e      35
      80      35
      81      35
      82      35
      86      37
      87      37
      88      37
      89      37
      8a      37
      8c      37
      8f      39
   }

   method 'booleanNightmares (ZZZZZZZ)V' {
      0      42
      3      42
      4      42
      5      42
      6      42
      7      42
      f      42
      12      43
      13      43
      14      43
      15      43
      16      43
      18      43
      19      43
      1a      43
      1e      44
      1f      44
      20      44
      21      44
      24      44
      25      44
      26      44
      2e      44
      31      45
      32      45
      33      45
      34      45
      35      45
      37      45
      38      45
      39      45
      3d      46
      3e      46
      3f      46
      40      46
      43      46
      44      46
      45      46
      4d      46
      50      47
      51      47
      52      47
      53      47
      54      47
      56      47
      57      47
      58      47
      5c      48
      5d      48
      5e      48
      61      49
      62      49
      63      49
      64      49
      65      49
      67      49
      68      49
      69      49
      6d      50
      6e      50
      6f      50
      70      50
      71      50
      74      50
      75      50
      76      50
      79      50
      7a      50
      7b      50
      7c      50
      84      50
      87      51
      88      51
      89      51
      8a      51
      8b      51
      8d      51
      8e      51
      8f      51
      93      53
      94      53
      95      53
      96      53
      97      53
      99      53
      9c      55
   }
}

Lines mapping:
5 <-> 7
6 <-> 7
7 <-> 9
8 <-> 11
9 <-> 13
10 <-> 16
12 <-> 18
15 <-> 21
16 <-> 21
17 <-> 21
18 <-> 21
19 <-> 21
20 <-> 21
26 <-> 25
27 <-> 27
28 <-> 29
29 <-> 31
30 <-> 33
31 <-> 35
32 <-> 38
34 <-> 40
37 <-> 43
38 <-> 43
39 <-> 45
40 <-> 47
41 <-> 49
42 <-> 51
43 <-> 54
45 <-> 56
Not mapped:
25
