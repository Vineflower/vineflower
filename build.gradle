// Copyright 2000-2021 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

import org.jetbrains.java.decompiler.build.JasmCompile

plugins {
  id 'jacoco'
  id 'org.jetbrains.kotlin.jvm' version '1.6.21'
  id("io.github.gradle-nexus.publish-plugin") version '1.3.0'
}

apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'scala'
apply plugin: 'maven-publish'
apply plugin: 'signing'

compileJava {
  sourceCompatibility '11'
  targetCompatibility '11'
}

group = 'org.vineflower'
archivesBaseName = 'vineflower'

version = '1.9.0'

def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

sourceSets {
  main.java.srcDirs 'src'
  test.java.srcDirs 'test'
  testDataGroovy.groovy.srcDirs files("testData/src/groovy/")
  testDataKotlin.kotlin.srcDirs files("testData/src/kt/")
  testDataScala.scala.srcDirs files("testData/src/scala")
}

repositories { mavenCentral() }

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
  testImplementation 'org.hamcrest:hamcrest:2.2'

  testDataGroovyImplementation 'org.codehaus.groovy:groovy:3.0.8'
  testDataKotlinImplementation platform('org.jetbrains.kotlin:kotlin-bom')
  testDataKotlinImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
  testDataScalaImplementation 'org.scala-lang:scala3-library_3:3.1.3'
  testRuntimeOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
}


jacocoTestReport.dependsOn(test)

build.dependsOn(jacocoTestReport)

jacocoTestReport {
  reports {
    xml.required = true
  }
}

java.toolchain {
  languageVersion = JavaLanguageVersion.of(11)
}

tasks.withType(JavaCompile) {
  options.deprecation = true
}

task testDataClasses {
  group = 'build'
}
testClasses.dependsOn(testDataClasses)

void createJavaTestDataSet(int version, String suffix = "", List<String> compilerArgs = []) {
  sourceSets.create("testDataJava${version}${suffix}") {
    it.java.srcDirs file("testData/src/java${version}${suffix.toLowerCase()}")
  }
  tasks.getByName("compileTestDataJava${version}${suffix}Java") {
    destinationDirectory = file("testData/classes/java${version}${suffix.toLowerCase()}")
    javaCompiler = javaToolchains.compilerFor {
      languageVersion = JavaLanguageVersion.of(version)
    }
    options.compilerArgs = compilerArgs
  }
  testDataClasses.dependsOn("testDataJava${version}${suffix}Classes")
}

def testJavaRuntimes = [:]

[8, 9, 11, 16, 17].forEach { version -> 
    createJavaTestDataSet(version)
    testJavaRuntimes[version] = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(version)
    }
}
[16, 17, 19].forEach { version -> createJavaTestDataSet(version, "Preview", ["--enable-preview"]) }
[8, 16].forEach { version -> createJavaTestDataSet(version, "NoDebug", ["-g:none"])}

task compileTestDataJasm(type: JasmCompile) {
  source = fileTree("testData/src/jasm/")
  destinationDirectory = file("testData/classes/jasm/")
  options.compilerArgs += ["-g"]
}
task testDataJasmClasses {
  group = 'build'
}
testDataJasmClasses.dependsOn(compileTestDataJasm)
testDataClasses.dependsOn(testDataJasmClasses)

compileTestDataGroovyGroovy {
  destinationDirectory = file("testData/classes/groovy")
}
testDataClasses.dependsOn(testDataGroovyClasses)

compileTestDataKotlinKotlin {
  destinationDirectory = file("testData/classes/kt")
}
testDataClasses.dependsOn(testDataKotlinClasses)

compileTestDataScalaScala {
  destinationDirectory = file("testData/classes/scala")
}
testDataClasses.dependsOn(testDataScalaClasses)

class TestDataRuntimesProvider implements CommandLineArgumentProvider {
    @Nested
    final MapProperty<String, JavaLauncher> launchers
    
    @Inject
    TestDataRuntimesProvider(final ObjectFactory objects) {
        this.launchers = objects.mapProperty(Integer, JavaLauncher)
    }
     
    @Override
    Iterable<String> asArguments() {
        def result = []
        this.launchers.get().each { k, v ->
            result << "-Djava.${k}.home=${v.metadata.installationPath.asFile.absolutePath}"
        }
        return result
    }
}

test {
  maxHeapSize = "512M"
  
  useJUnitPlatform()
  systemProperty "DOT_EXPORT_DIR", System.getProperty("DOT_EXPORT_DIR", null)
  systemProperty "DOT_ERROR_EXPORT_DIR", System.getProperty("DOT_ERROR_EXPORT_DIR", null)
  systemProperty "VALIDATE_DECOMPILED_CODE", System.getProperty("VALIDATE_DECOMPILED_CODE", "false")
  
  def provider = objects.newInstance(TestDataRuntimesProvider)
  testJavaRuntimes.each { k, v ->
      provider.launchers.put(k, v)
  }
  jvmArgumentProviders << provider
}

jar {
  manifest {
    attributes (
      'Main-Class': 'org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler',
      'Implementation-Name': "Vineflower",
      'Implementation-Version': project.version
    )
  }
}

tasks.withType(Javadoc) {
  failOnError false
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addStringOption('encoding', 'UTF-8')
  options.addStringOption('charSet', 'UTF-8')
}

task sourceJar(type:Jar) {
  classifier = "sources"
  from sourceSets.main.allSource
}

tasks.withType(JavaCompile).configureEach {
  it.options.encoding = "UTF-8"
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = 'Vineflower'
        packaging = 'jar'
        // optionally artifactId can be defined here
        description = 'Modern Java & JVM language decompiler aiming to be as accurate as possible, with an emphasis on output quality.'
        url = 'https://vineflower.org'

        scm {
          connection = 'scm:git:https://github.com/Vineflower/vineflower.git'
          developerConnection = 'scm:git:ssh:git@github.com:Vineflower/vineflower.git'
          url = 'https://github.com/Vineflower/vineflower'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'vineflower'
            name = 'Vineflower Development Team'
            email = '<fixme!>'
          }
        }
      }

      from components.java
      if (ENV.SNAPSHOTS_URL) {
        version = project.version + "-SNAPSHOT"
      }
      artifact(sourceJar)
      artifact(javadocJar)
    }
  }

  // select the repositories you want to publish to
  repositories {

    if (ENV.SONATYPE_USER) {
      maven {
        url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        credentials {
          username ENV.SONATYPE_USER
          password ENV.SONATYPE_PASS
        }
      }
    }
  }
}

nexusPublishing {
  repositories {
    sonatype {
      username = ENV.SONATYPE_USER
      password = ENV.SONATYPE_PASS

      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
    }
  }
}

signing {
  def signingKey = ENV.SIGNING_KEY
  def signingPassword = ENV.SIGNING_KEY_PASSPHRASE

  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.mavenJava
}