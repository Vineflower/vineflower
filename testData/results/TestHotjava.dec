public class TestHotjava {
   public void test() {
      System.out.println("Hello!");// 3
   }// 2

   public void testJsr() {
      try {
         System.out.println("Try");// 7 8
      } finally {
         System.out.println("Jsr");
      }
   }// 10

   // $QF: Could not inline inconsistent finally blocks
   // $QF: Could not create synchronized statement, marking monitor enters and exits
   public void testMonitor1() {
      synchronized(this){} // $QF: monitorenter // 15

      try {
         System.out.println("Synchronized");// 16
      } catch (Throwable var3) {
         // $QF: monitorexit
         throw var3;
      }

      // $QF: monitorexit
   }

   // $QF: Could not inline inconsistent finally blocks
   // $QF: Could not create synchronized statement, marking monitor enters and exits
   public void testMonitor2(Object var1) {
      synchronized(var1){} // $QF: monitorenter // 21

      try {
         System.out.println("Synchronized");// 22
      } catch (Throwable var4) {
         // $QF: monitorexit
         throw var4;
      }

      // $QF: monitorexit
   }

   // $QF: Could not inline inconsistent finally blocks
   // $QF: Could not create synchronized statement, marking monitor enters and exits
   public void testMonitor3() {
      synchronized(this){} // $QF: monitorenter // 27

      try {
         try {
            System.out.println("Try");// 28 29
         } finally {
            System.out.println("Jsr");
         }
      } catch (Throwable var10) {
         // $QF: monitorexit
         throw var10;
      }

      // $QF: monitorexit
   }
}

class 'TestHotjava' {
   method 'test ()V' {
      0      2
      1      2
      2      2
      3      2
      4      2
      5      2
      6      2
      7      2
      8      3
   }

   method 'testJsr ()V' {
      0      7
      1      7
      2      7
      3      7
      4      7
      5      7
      c      9
      d      9
      e      9
      f      9
      10      9
      11      9
      12      9
      18      11
   }

   method 'testMonitor1 ()V' {
      0      16
      2      16
      3      16
      4      19
      5      19
      6      19
      7      19
      8      19
      9      19
      d      25
      e      26
      10      21
      11      22
   }

   method 'testMonitor2 (Ljava/lang/Object;)V' {
      0      31
      2      31
      3      31
      4      34
      5      34
      6      34
      7      34
      8      34
      9      34
      d      40
      e      41
      10      36
      11      37
   }

   method 'testMonitor3 ()V' {
      0      46
      2      46
      3      46
      4      50
      5      50
      6      50
      7      50
      8      50
      9      50
      12      52
      13      52
      14      52
      15      52
      16      52
      17      52
      18      52
      19      52
      25      59
      26      60
      28      55
      29      56
   }
}

Lines mapping:
2 <-> 4
3 <-> 3
7 <-> 8
8 <-> 8
10 <-> 12
15 <-> 17
16 <-> 20
21 <-> 32
22 <-> 35
27 <-> 47
28 <-> 51
29 <-> 51
Not mapped:
31
