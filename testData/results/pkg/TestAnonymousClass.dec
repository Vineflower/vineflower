package pkg;

import java.util.Iterator;

public abstract class TestAnonymousClass {
   public static final Runnable R3 = new Runnable() {
      @Override
      public void run() {
         int a = 5;// 39
         int b = 5;// 40
      }// 41
   };
   public static final Runnable R = new Runnable() {
      @Override
      public void run() {
         int a = 5;// 56
         int b = 5;// 57
      }// 58
   };
   public static final Runnable R1 = new Runnable() {
      @Override
      public void run() {
         int a = 5;// 64
         int b = 5;// 65
      }// 66
   };
   private final TestAnonymousClass.InnerRecursive y = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive(null) {
      @Override
      void foo() {
         int a = 5;// 86
         int b = 5;// 87
         int g = 5;// 88
      }// 89
   }) {
      int v = 5;
      int t = 5;
      int j = 5;
      int o = 5;
   };
   private final TestAnonymousClass.InnerRecursive x = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive(null) {
      @Override
      void foo() {
         int a = 5;// 101
         int b = 5;// 102
         int g = 5;// 103
      }// 104
   }) {
      int v = 5;
      int t = 5;
      int j = 5;
      int o = 5;
   };

   void foo(int i) throws Exception {
      if (i > 0) {// 13
         TestAnonymousClass.I r = new TestAnonymousClass.I() {// 14
            @Override
            public void foo() throws Exception {
               int a = 5;// 16
               int b = 5;// 17
            }// 18
         };
         r.foo();// 20
      } else {
         int x = 5;// 23
         System.out.println(5);// 24
      }
   }// 26

   void bar() {
      (new Object() {
         public void foo(String s) {
            System.out.println(s);// 31
         }// 32
      }).foo("Hello world");// 29 33
   }// 34

   void boo() {
      int a = 5;// 46
   }// 47

   void zoo() {
      int a = 5;// 50
   }// 51

   public static Iterable<Integer> innerInAnon() {
      return new Iterable<Integer>() {// 125
         public int field = 1491401;

         @Override
         public Iterator<Integer> iterator() {
            return new Inner();// 143
         }

         class Inner implements Iterator<Integer> {
            @Override
            public boolean hasNext() {
               return true;// 132
            }

            public Integer next() {
               return field ^= 643483;// 137
            }
         }
      };
   }

   public static Iterable<Integer> innerInAnon2() {
      return new Iterable<Integer>() {// 149
         public int field = 1491401;

         @Override
         public Iterator<Integer> iterator() {
            return new I2().new Inner();// 169
         }

         class I2 {
            class Inner implements Iterator<Integer> {
               @Override
               public boolean hasNext() {
                  return true;// 157
               }

               public Integer next() {
                  return field ^= 643483;// 162
               }
            }
         }
      };
   }

   interface I {
      void foo() throws Exception;
   }

   private static class Inner {
      private static Runnable R_I = new Runnable() {
         @Override
         public void run() {
            int a = 5;// 77
            int b = 5;// 78
         }// 79
      };
   }

   static class InnerRecursive {
      TestAnonymousClass.InnerRecursive r;

      public InnerRecursive(TestAnonymousClass.InnerRecursive r) {
         this.r = r;// 116
      }// 117

      void foo() {
      }// 121
   }
}

class 'pkg/TestAnonymousClass$3' {
   method 'run ()V' {
      0      8
      1      8
      2      9
      3      9
      4      10
   }
}

class 'pkg/TestAnonymousClass$4' {
   method 'run ()V' {
      0      15
      1      15
      2      16
      3      16
      4      17
   }
}

class 'pkg/TestAnonymousClass$5' {
   method 'run ()V' {
      0      22
      1      22
      2      23
      3      23
      4      24
   }
}

class 'pkg/TestAnonymousClass$6' {
   method 'foo ()V' {
      0      29
      1      29
      2      30
      3      30
      4      31
      5      31
      6      32
   }
}

class 'pkg/TestAnonymousClass$8' {
   method 'foo ()V' {
      0      42
      1      42
      2      43
      3      43
      4      44
      5      44
      6      45
   }
}

class 'pkg/TestAnonymousClass' {
   method 'foo (I)V' {
      0      54
      1      54
      c      55
      d      62
      e      62
      f      62
      10      62
      11      62
      12      62
      16      64
      17      64
      18      65
      19      65
      1a      65
      1b      65
      1c      65
      1f      67
   }

   method 'bar ()V' {
      8      74
      9      74
      a      74
      b      74
      c      74
      d      75
   }

   method 'boo ()V' {
      0      78
      1      78
      2      79
   }

   method 'zoo ()V' {
      0      82
      1      82
      2      83
   }

   method 'innerInAnon ()Ljava/lang/Iterable;' {
      7      86
   }

   method 'innerInAnon2 ()Ljava/lang/Iterable;' {
      7      108
   }
}

class 'pkg/TestAnonymousClass$1' {
   method 'foo ()V' {
      0      58
      1      58
      2      59
      3      59
      4      60
   }
}

class 'pkg/TestAnonymousClass$2' {
   method 'foo (Ljava/lang/String;)V' {
      0      72
      1      72
      2      72
      3      72
      4      72
      5      72
      6      72
      7      73
   }
}

class 'pkg/TestAnonymousClass$10' {
   method 'iterator ()Ljava/util/Iterator;' {
      8      91
   }
}

class 'pkg/TestAnonymousClass$10$Inner' {
   method 'hasNext ()Z' {
      0      97
      1      97
   }

   method 'next ()Ljava/lang/Integer;' {
      1      101
      2      101
      3      101
      8      101
      9      101
      c      101
      d      101
      e      101
      f      101
      10      101
      11      101
      12      101
   }
}

class 'pkg/TestAnonymousClass$11' {
   method 'iterator ()Ljava/util/Iterator;' {
      14      113
   }
}

class 'pkg/TestAnonymousClass$11$I2$Inner' {
   method 'hasNext ()Z' {
      0      120
      1      120
   }

   method 'next ()Ljava/lang/Integer;' {
      4      124
      5      124
      6      124
      b      124
      c      124
      f      124
      10      124
      11      124
      12      124
      13      124
      14      124
      15      124
   }
}

class 'pkg/TestAnonymousClass$Inner$1' {
   method 'run ()V' {
      0      139
      1      139
      2      140
      3      140
      4      141
   }
}

class 'pkg/TestAnonymousClass$InnerRecursive' {
   method '<init> (Lpkg/TestAnonymousClass$InnerRecursive;)V' {
      4      149
      5      149
      6      149
      7      149
      8      149
      9      150
   }

   method 'foo ()V' {
      0      153
   }
}

Lines mapping:
13 <-> 55
14 <-> 56
16 <-> 59
17 <-> 60
18 <-> 61
20 <-> 63
23 <-> 65
24 <-> 66
26 <-> 68
29 <-> 75
31 <-> 73
32 <-> 74
33 <-> 75
34 <-> 76
39 <-> 9
40 <-> 10
41 <-> 11
46 <-> 79
47 <-> 80
50 <-> 83
51 <-> 84
56 <-> 16
57 <-> 17
58 <-> 18
64 <-> 23
65 <-> 24
66 <-> 25
77 <-> 140
78 <-> 141
79 <-> 142
86 <-> 30
87 <-> 31
88 <-> 32
89 <-> 33
101 <-> 43
102 <-> 44
103 <-> 45
104 <-> 46
116 <-> 150
117 <-> 151
121 <-> 154
125 <-> 87
132 <-> 98
137 <-> 102
143 <-> 92
149 <-> 109
157 <-> 121
162 <-> 125
169 <-> 114
Not mapped:
21
115