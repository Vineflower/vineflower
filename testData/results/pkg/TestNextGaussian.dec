package pkg;

public class TestNextGaussian {
   private boolean haveNextNextGaussian = false;
   private double nextNextGaussian = 0.0;

   public synchronized double nextGaussian() {
      if (this.haveNextNextGaussian) {// 9
         this.haveNextNextGaussian = false;// 10
         return this.nextNextGaussian;// 11
      } else {
         double v1;
         double v2;
         double s;
         do {
            v1 = 2.0 * this.nextDouble() - 1.0;// 15
            v2 = 2.0 * this.nextDouble() - 1.0;// 16
            s = v1 * v1 + v2 * v2;// 17
         } while(s >= 1.0 || s == 0.0);// 18

         double multiplier = StrictMath.sqrt(-2.0 * StrictMath.log(s) / s);// 19
         this.nextNextGaussian = v2 * multiplier;// 20
         this.haveNextNextGaussian = true;// 21
         return v1 * multiplier;// 22
      }
   }

   private double nextDouble() {
      return 0.0;// 27
   }
}

class 'pkg/TestNextGaussian' {
   method 'nextGaussian ()D' {
      0      7
      1      7
      2      7
      3      7
      4      7
      7      8
      8      8
      9      8
      a      8
      b      8
      c      9
      d      9
      e      9
      f      9
      10      9
      11      15
      12      15
      13      15
      14      15
      15      15
      16      15
      17      15
      18      15
      19      15
      1a      15
      1b      15
      1c      16
      1d      16
      1e      16
      1f      16
      20      16
      21      16
      22      16
      23      16
      24      16
      25      16
      26      16
      27      17
      28      17
      29      17
      2a      17
      2b      17
      2c      17
      2d      17
      2e      17
      2f      17
      30      18
      31      18
      32      18
      33      18
      34      18
      37      18
      38      18
      39      18
      3a      18
      3b      18
      3e      20
      3f      20
      40      20
      41      20
      42      20
      43      20
      44      20
      45      20
      46      20
      47      20
      48      20
      49      20
      4a      20
      4b      20
      4c      20
      4d      20
      4e      20
      4f      21
      50      21
      51      21
      52      21
      53      21
      54      21
      55      21
      56      21
      57      22
      58      22
      59      22
      5a      22
      5b      22
      5c      23
      5d      23
      5e      23
      5f      23
      60      23
   }

   method 'nextDouble ()D' {
      0      28
      1      28
   }
}

Lines mapping:
9 <-> 8
10 <-> 9
11 <-> 10
15 <-> 16
16 <-> 17
17 <-> 18
18 <-> 19
19 <-> 21
20 <-> 22
21 <-> 23
22 <-> 24
27 <-> 29
