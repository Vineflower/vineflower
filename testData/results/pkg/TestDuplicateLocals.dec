package pkg;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Predicate;

public class TestDuplicateLocals {
   public static final Function<Object, Predicate<Object>> A = var0 -> var0x -> true;
   private int i = 42;

   public void test1(List<List<Object>> var1) {
      System.out.println(var1);
      var1.forEach(var0 -> {
         System.out.println(var0);
         var0.forEach(var1x -> System.out.println(var0));
      });
   }

   public static void test2(List<List<Object>> var0) {
      System.out.println(var0);
      var0.forEach(var0x -> {
         System.out.println(var0x);
         var0x.forEach(var0xx -> System.out.println(var0xx));
      });
   }

   public void test3(List<List<Object>> var1) {
      System.out.println(var1);
      var1.forEach(var0 -> {
         int var1x = var0.size();
         System.out.println(var0);
         var0.forEach(var1xx -> System.out.println(var1x));
      });
   }

   public void test4(Map<String, List<Object>> var1) {
      System.out.println(var1);
      var1.forEach((var1x, var2) -> {
         System.out.println(var1x);
         var1.forEach((var1xx, var2x) -> System.out.println(var1x));
      });
   }

   public static void test5(Optional<Object> var0) {
      var0.ifPresent(var0x -> System.out.println(var0x));
   }

   public void test6(Optional<Object> var1) {
      var1.ifPresent(var1x -> System.out.println(this.i + " " + var1x));
   }

   public static Integer test7(int var0) {
      return (Integer)new HashMap().computeIfAbsent(var0, var0x -> var0x + 1);
   }

   public class Inner {
      public Integer test7(int var1) {
         return (Integer)new HashMap().computeIfAbsent(var1, var1x -> var1x + TestDuplicateLocals.this.i);
      }
   }

   interface Inner2 {
      TestDuplicateLocals.Inner2 A = var0 -> var0x -> true;

      Predicate<Object> getPredicate(Object var1);
   }
}

class 'pkg/TestDuplicateLocals' {
   method 'lambda$static$1 (Ljava/lang/Object;)Ljava/util/function/Predicate;' {
      5      10
   }

   method 'lambda$null$0 (Ljava/lang/Object;)Z' {
      0      10
      1      10
   }

   method 'test1 (Ljava/util/List;)V' {
      0      14
      1      14
      2      14
      3      14
      4      14
      5      14
      6      14
      7      15
      d      15
      e      15
      f      15
      10      15
      11      15
      12      19
   }

   method 'lambda$test1$3 (Ljava/util/List;)V' {
      2      16
      3      16
      4      16
      5      16
      6      16
      7      16
      8      16
      9      17
      10      17
      11      17
      12      17
      13      17
      14      17
      15      18
   }

   method 'lambda$null$2 (Ljava/util/List;Ljava/lang/Object;)V' {
      0      17
      1      17
      2      17
      3      17
      4      17
      5      17
      6      17
      7      17
   }

   method 'test2 (Ljava/util/List;)V' {
      0      22
      1      22
      2      22
      3      22
      4      22
      5      22
      6      22
      7      23
      d      23
      e      23
      f      23
      10      23
      11      23
      12      27
   }

   method 'lambda$test2$5 (Ljava/util/List;)V' {
      0      24
      1      24
      2      24
      3      24
      4      24
      5      24
      6      24
      7      25
      d      25
      e      25
      f      25
      10      25
      11      25
      12      26
   }

   method 'lambda$null$4 (Ljava/lang/Object;)V' {
      0      25
      1      25
      2      25
      3      25
      4      25
      5      25
      6      25
      7      25
   }

   method 'test3 (Ljava/util/List;)V' {
      0      30
      1      30
      2      30
      3      30
      4      30
      5      30
      6      30
      7      31
      d      31
      e      31
      f      31
      10      31
      11      31
      12      36
   }

   method 'lambda$test3$7 (Ljava/util/List;)V' {
      0      32
      1      32
      2      32
      3      32
      4      32
      5      32
      6      32
      7      33
      8      33
      9      33
      a      33
      b      33
      c      33
      d      33
      e      34
      15      34
      16      34
      17      34
      18      34
      19      34
      1a      35
   }

   method 'lambda$null$6 (ILjava/lang/Object;)V' {
      0      34
      1      34
      2      34
      3      34
      4      34
      5      34
      6      34
      7      34
   }

   method 'test4 (Ljava/util/Map;)V' {
      0      39
      1      39
      2      39
      3      39
      4      39
      5      39
      6      39
      7      40
      e      40
      f      40
      10      40
      11      40
      12      40
      13      44
   }

   method 'lambda$test4$9 (Ljava/util/Map;Ljava/lang/String;Ljava/util/List;)V' {
      0      41
      1      41
      2      41
      3      41
      4      41
      5      41
      6      41
      7      42
      e      42
      f      42
      10      42
      11      42
      12      42
      13      43
   }

   method 'lambda$null$8 (Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V' {
      0      42
      1      42
      2      42
      3      42
      4      42
      5      42
      6      42
      7      42
   }

   method 'test5 (Ljava/util/Optional;)V' {
      0      47
      6      47
      7      47
      8      47
      9      48
   }

   method 'lambda$test5$10 (Ljava/lang/Object;)V' {
      0      47
      1      47
      2      47
      3      47
      4      47
      5      47
      6      47
      7      47
   }

   method 'test6 (Ljava/util/Optional;)V' {
      0      51
      7      51
      8      51
      9      51
      a      52
   }

   method 'lambda$test6$11 (Ljava/lang/Object;)V' {
      0      51
      1      51
      2      51
      a      51
      b      51
      c      51
      d      51
      11      51
      12      51
      16      51
      1a      51
      1b      51
      1c      51
      1d      51
      1e      51
      1f      51
      20      51
   }

   method 'test7 (I)Ljava/lang/Integer;' {
      7      55
      8      55
      9      55
      a      55
      10      55
      11      55
      12      55
      13      55
      14      55
      15      55
      16      55
   }

   method 'lambda$test7$12 (Ljava/lang/Integer;)Ljava/lang/Integer;' {
      0      55
      1      55
      2      55
      3      55
      4      55
      5      55
      6      55
      7      55
      8      55
      9      55
   }
}

class 'pkg/TestDuplicateLocals$Inner' {
   method 'test7 (I)Ljava/lang/Integer;' {
      7      60
      8      60
      9      60
      a      60
      11      60
      12      60
      13      60
      14      60
      15      60
      16      60
      17      60
   }

   method 'lambda$test7$0 (Ljava/lang/Integer;)Ljava/lang/Integer;' {
      0      60
      1      60
      2      60
      3      60
      5      60
      6      60
      7      60
      8      60
      9      60
      a      60
      b      60
      c      60
      d      60
      e      60
      f      60
   }
}

class 'pkg/TestDuplicateLocals$Inner2' {
   method 'lambda$static$1 (Ljava/lang/Object;)Ljava/util/function/Predicate;' {
      5      65
   }

   method 'lambda$null$0 (Ljava/lang/Object;)Z' {
      0      65
      1      65
   }
}

Lines mapping:
