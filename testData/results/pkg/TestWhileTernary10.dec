package pkg;

import java.util.stream.Stream;

public class TestWhileTernary10 {
   public double test(boolean condition, int n, Stream<Double> doubles) {
      double[] ds = new double[]{(double)n};// 7

      for(int i = 0; condition ? i >= n : n >= i; ++i) {// 9
         for(int j = 0; j < n; ++j) {// 10
            System.out.println(1);// 11
            if (j > i) {// 13
               ++j;// 14
            }
         }
      }

      doubles.forEach(d -> ds[0] -= d);// 19
      return ds[0];// 20
   }

   public double test1(boolean condition, int n, Stream<Double> doubles) {
      double[] ds = new double[]{(double)n};// 24

      for(int i = 0; condition ? i >= n : n >= i; ++i) {// 26
         ds[0] += (double)i;// 27
      }

      doubles.forEach(d -> ds[0] -= d);// 30
      return ds[0];// 31
   }

   public double test2(boolean condition, int n, Stream<Double> doubles) {
      double[] ds = new double[]{(double)n};// 35

      for(int i = 0; condition ? i >= n : n >= i; ++i) {// 37
         for(int j = 0; j < n; ++j) {// 38
            for(int k = 0; k < i; ++k) {// 39
               System.out.println(1);// 40
               if (j > i) {// 42
                  ++j;// 43
               }
            }
         }
      }

      doubles.forEach(d -> ds[0] -= d);// 49
      return ds[0];// 50
   }
}

class 'pkg/TestWhileTernary10' {
   method 'test (ZILjava/util/stream/Stream;)D' {
      5      6
      6      6
      8      6
      9      6
      a      8
      b      8
      c      8
      d      8
      e      8
      11      8
      12      8
      13      8
      14      8
      1a      8
      1b      8
      1c      8
      1d      8
      20      9
      21      9
      22      9
      23      9
      24      9
      25      9
      26      9
      29      10
      2a      10
      2b      10
      2c      10
      2d      10
      2e      10
      2f      10
      30      11
      31      11
      32      11
      33      11
      34      11
      37      12
      3a      9
      3b      9
      3c      9
      40      8
      41      8
      42      8
      46      17
      4e      17
      4f      17
      50      17
      51      17
      52      17
      53      18
      54      18
      55      18
      56      18
      57      18
   }

   method 'lambda$test$0 ([DLjava/lang/Double;)V' {
      0      17
      1      17
      4      17
      5      17
      6      17
      7      17
      9      17
      a      17
   }

   method 'test1 (ZILjava/util/stream/Stream;)D' {
      5      22
      6      22
      8      22
      9      22
      a      24
      b      24
      c      24
      d      24
      e      24
      11      24
      12      24
      13      24
      14      24
      1a      24
      1b      24
      1c      24
      1d      24
      20      25
      21      25
      22      25
      25      25
      26      25
      27      25
      29      25
      2a      24
      2b      24
      2c      24
      30      28
      38      28
      39      28
      3a      28
      3b      28
      3c      28
      3d      29
      3e      29
      3f      29
      40      29
      41      29
   }

   method 'lambda$test1$1 ([DLjava/lang/Double;)V' {
      0      28
      1      28
      4      28
      5      28
      6      28
      7      28
      9      28
      a      28
   }

   method 'test2 (ZILjava/util/stream/Stream;)D' {
      5      33
      6      33
      8      33
      9      33
      a      35
      b      35
      c      35
      d      35
      e      35
      11      35
      12      35
      13      35
      14      35
      1a      35
      1b      35
      1c      35
      1d      35
      20      36
      21      36
      22      36
      23      36
      24      36
      25      36
      26      36
      29      37
      2a      37
      2b      37
      2c      37
      2d      37
      2e      37
      2f      37
      30      37
      33      38
      34      38
      35      38
      36      38
      37      38
      38      38
      39      38
      3a      39
      3b      39
      3c      39
      3d      39
      3e      39
      41      40
      44      37
      45      37
      46      37
      4a      36
      4b      36
      4c      36
      50      35
      51      35
      52      35
      56      46
      5e      46
      5f      46
      60      46
      61      46
      62      46
      63      47
      64      47
      65      47
      66      47
      67      47
   }

   method 'lambda$test2$2 ([DLjava/lang/Double;)V' {
      0      46
      1      46
      4      46
      5      46
      6      46
      7      46
      9      46
      a      46
   }
}

Lines mapping:
7 <-> 7
9 <-> 9
10 <-> 10
11 <-> 11
13 <-> 12
14 <-> 13
19 <-> 18
20 <-> 19
24 <-> 23
26 <-> 25
27 <-> 26
30 <-> 29
31 <-> 30
35 <-> 34
37 <-> 36
38 <-> 37
39 <-> 38
40 <-> 39
42 <-> 40
43 <-> 41
49 <-> 47
50 <-> 48
