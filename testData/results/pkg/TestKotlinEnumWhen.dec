package pkg;

import kotlin.DeprecationLevel;
import kotlin.Metadata;
import kotlin.NoWhenBranchMatchedException;

@Metadata(
   mv = {1, 6, 0},
   k = 1,
   xi = 48,
   d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004J\u0006\u0010\u0005\u001a\u00020\u0004J\u0006\u0010\u0006\u001a\u00020\u0004J\u0006\u0010\u0007\u001a\u00020\u0004J\u0006\u0010\b\u001a\u00020\u0004j\u0002\b\tj\u0002\b\nj\u0002\b\u000b¨\u0006\f"},
   d2 = {"Lpkg/TestKotlinEnumWhen;", "", "(Ljava/lang/String;I)V", "testAnotherEnum", "", "testConsecutive", "testConsecutiveMixed", "testExpression", "testStatement", "FIRST", "SECOND", "THIRD", "vineflower_testDataKotlin"}
)
public enum TestKotlinEnumWhen {
   FIRST,
   SECOND,
   THIRD;

   public final void testStatement() {
      switch (this) {// 7
         case FIRST:
            System.out.println("first!");// 8
            break;
         case SECOND:
            System.out.println("second!");// 9
            break;
         case THIRD:
            System.out.println("third!");// 10
      }
   }// 12

   public final void testExpression() {
      String var1 = switch (this) {// 16
         case FIRST -> "first!";// 17
         case SECOND -> "second!";// 18
         case THIRD -> "third!";// 19
         default -> throw new NoWhenBranchMatchedException();
      };
      System.out.println(var1);// 15
   }// 22

   public final void testAnotherEnum() {
      DeprecationLevel level = testAnotherEnum$getLevel();// 28
      switch (level) {
         case WARNING:
            System.out.println("warning " + level);// 29
            break;
         case ERROR:
            System.out.println("error " + level);// 30
            break;
         case HIDDEN:
            System.out.println("hidden " + level);// 31
      }
   }// 33

   public final void testConsecutive() {
      switch (this) {// 36
         case FIRST:
            System.out.println("first!");// 37
            break;
         case SECOND:
            System.out.println("second!");// 38
            break;
         case THIRD:
            System.out.println("third!");// 39
      }

      switch (this) {// 42
         case FIRST:
            System.out.println("first, again!");// 43
            break;
         case SECOND:
            System.out.println("second, again!");// 44
            break;
         case THIRD:
            System.out.println("third, again!");// 45
      }
   }// 47

   public final void testConsecutiveMixed() {
      DeprecationLevel level = testConsecutiveMixed$getLevel-0();// 53
      switch (level) {
         case WARNING:
            System.out.println("warning " + level);// 54
            break;
         case ERROR:
            System.out.println("error " + level);// 55
            break;
         case HIDDEN:
            System.out.println("hidden " + level);// 56
      }

      switch (this) {// 59
         case FIRST:
            System.out.println("first!");// 60
            break;
         case SECOND:
            System.out.println("second!");// 61
            break;
         case THIRD:
            System.out.println("third!");// 62
      }
   }// 64

   private static final DeprecationLevel testAnotherEnum$getLevel() {
      throw new Exception();// 26
   }

   private static final DeprecationLevel testConsecutiveMixed$getLevel_0/* $VF was: testConsecutiveMixed$getLevel-0*/() {
      throw new Exception();// 51
   }
}

class 'pkg/TestKotlinEnumWhen' {
   method 'testStatement ()V' {
      0      19
      8      19
      9      19
      a      19
      b      19
      c      19
      d      19
      e      19
      f      19
      10      19
      11      19
      12      19
      13      19
      14      19
      15      19
      16      19
      17      19
      18      19
      19      19
      1a      19
      1b      19
      1c      19
      1d      19
      1e      19
      1f      19
      20      19
      21      19
      22      19
      23      19
      24      21
      25      21
      26      21
      27      21
      28      21
      2a      21
      2b      21
      2c      21
      2d      22
      30      24
      31      24
      32      24
      33      24
      34      24
      36      24
      37      24
      38      24
      39      25
      3c      27
      3d      27
      3e      27
      3f      27
      40      27
      42      27
      43      27
      44      27
      45      29
   }

   method 'testExpression ()V' {
      0      32
      8      32
      9      32
      a      32
      b      32
      c      32
      d      32
      e      32
      f      32
      10      32
      11      32
      12      32
      13      32
      14      32
      15      32
      16      32
      17      32
      18      32
      19      32
      1a      32
      1b      32
      1c      32
      1d      32
      1e      32
      1f      32
      20      32
      21      32
      22      32
      23      32
      24      33
      25      33
      29      34
      2a      34
      2e      35
      2f      35
      3a      36
      3b      32
      3c      38
      3d      38
      3e      38
      3f      38
      40      38
      41      38
      42      38
      43      39
   }

   method 'testAnotherEnum ()V' {
      0      42
      1      42
      2      42
      3      42
      7      43
      b      43
      c      43
      d      43
      e      43
      f      43
      10      43
      11      43
      12      43
      13      43
      14      43
      15      43
      16      43
      17      43
      18      43
      19      43
      1a      43
      1b      43
      1c      43
      1d      43
      1e      43
      1f      43
      20      43
      21      43
      22      43
      23      43
      24      43
      25      43
      26      43
      27      43
      28      45
      29      45
      2a      45
      2b      45
      2c      45
      2d      45
      2e      45
      2f      45
      30      45
      32      45
      33      45
      34      45
      35      46
      38      48
      39      48
      3a      48
      3b      48
      3c      48
      3d      48
      3e      48
      3f      48
      40      48
      42      48
      43      48
      44      48
      45      49
      48      51
      49      51
      4a      51
      4b      51
      4c      51
      4d      51
      4e      51
      4f      51
      50      51
      52      51
      53      51
      54      51
      55      53
   }

   method 'testConsecutive ()V' {
      0      56
      8      56
      9      56
      a      56
      b      56
      c      56
      d      56
      e      56
      f      56
      10      56
      11      56
      12      56
      13      56
      14      56
      15      56
      16      56
      17      56
      18      56
      19      56
      1a      56
      1b      56
      1c      56
      1d      56
      1e      56
      1f      56
      20      56
      21      56
      22      56
      23      56
      24      58
      25      58
      26      58
      27      58
      28      58
      2a      58
      2b      58
      2c      58
      2d      59
      30      61
      31      61
      32      61
      33      61
      34      61
      36      61
      37      61
      38      61
      39      62
      3c      64
      3d      64
      3e      64
      3f      64
      40      64
      42      64
      43      64
      44      64
      45      67
      4d      67
      4e      67
      4f      67
      50      67
      51      67
      52      67
      53      67
      54      67
      55      67
      56      67
      57      67
      58      67
      59      67
      5a      67
      5b      67
      5c      67
      5d      67
      5e      67
      5f      67
      60      67
      61      67
      62      67
      63      67
      64      67
      65      67
      66      67
      67      67
      68      69
      69      69
      6a      69
      6b      69
      6c      69
      6e      69
      6f      69
      70      69
      71      70
      74      72
      75      72
      76      72
      77      72
      78      72
      7a      72
      7b      72
      7c      72
      7d      73
      80      75
      81      75
      82      75
      83      75
      84      75
      86      75
      87      75
      88      75
      89      77
   }

   method 'testConsecutiveMixed ()V' {
      0      80
      1      80
      2      80
      3      80
      7      81
      b      81
      c      81
      d      81
      e      81
      f      81
      10      81
      11      81
      12      81
      13      81
      14      81
      15      81
      16      81
      17      81
      18      81
      19      81
      1a      81
      1b      81
      1c      81
      1d      81
      1e      81
      1f      81
      20      81
      21      81
      22      81
      23      81
      24      81
      25      81
      26      81
      27      81
      28      83
      29      83
      2a      83
      2b      83
      2c      83
      2d      83
      2e      83
      2f      83
      30      83
      32      83
      33      83
      34      83
      35      84
      38      86
      39      86
      3a      86
      3b      86
      3c      86
      3d      86
      3e      86
      3f      86
      40      86
      42      86
      43      86
      44      86
      45      87
      48      89
      49      89
      4a      89
      4b      89
      4c      89
      4d      89
      4e      89
      4f      89
      50      89
      52      89
      53      89
      54      89
      55      92
      5d      92
      5e      92
      5f      92
      60      92
      61      92
      62      92
      63      92
      64      92
      65      92
      66      92
      67      92
      68      92
      69      92
      6a      92
      6b      92
      6c      92
      6d      92
      6e      92
      6f      92
      70      92
      71      92
      72      92
      73      92
      74      92
      75      92
      76      92
      77      92
      78      94
      79      94
      7a      94
      7b      94
      7c      94
      7e      94
      7f      94
      80      94
      81      95
      84      97
      85      97
      86      97
      87      97
      88      97
      8a      97
      8b      97
      8c      97
      8d      98
      90      100
      91      100
      92      100
      93      100
      94      100
      96      100
      97      100
      98      100
      99      102
   }

   method 'testAnotherEnum$getLevel ()Lkotlin/DeprecationLevel;' {
      7      105
   }

   method 'testConsecutiveMixed$getLevel-0 ()Lkotlin/DeprecationLevel;' {
      7      109
   }
}

Lines mapping:
7 <-> 20
8 <-> 22
9 <-> 25
10 <-> 28
12 <-> 30
15 <-> 39
16 <-> 33
17 <-> 34
18 <-> 35
19 <-> 36
22 <-> 40
26 <-> 106
28 <-> 43
29 <-> 46
30 <-> 49
31 <-> 52
33 <-> 54
36 <-> 57
37 <-> 59
38 <-> 62
39 <-> 65
42 <-> 68
43 <-> 70
44 <-> 73
45 <-> 76
47 <-> 78
51 <-> 110
53 <-> 81
54 <-> 84
55 <-> 87
56 <-> 90
59 <-> 93
60 <-> 95
61 <-> 98
62 <-> 101
64 <-> 103
