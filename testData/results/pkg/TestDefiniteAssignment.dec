package pkg;

import java.io.IOException;

public class TestDefiniteAssignment {
   void testExample16$1$$1(int v) throws IOException {
      int k;
      if (v > 0 && (k = System.in.read()) >= 0) {// 8
         System.out.println(k);// 9
      }
   }// 10

   void testExample16$1$$2(int n) {
      while(n < 5) {// 16 17
         n = 6;// 18
      }

      System.out.println(n);// 20
   }// 22

   void testExample16$1$$3modified(int n, int m) {
      int k;
      while(true) {
         if (n >= 4) {// 26
            k = m;
            if (m >= 5) {
               break;
            }
         }

         k = n;// 27
         if (n >= 5) {// 28
            break;
         }

         n = 6;// 29
      }

      System.out.println(k);// 31
   }// 32

   void testAssignments(int n, boolean bool) {
      if (bool) {// 36
         int a = n;
         if (n > 0 || (a = -n) > 100) {
            System.out.println(a);// 37
         }
      }

      int b;
      if (!bool && (b = n * n) <= 0) {// 41
         System.out.println(b);// 44
      } else {
         System.out.println("b");// 42
      }

      double cFake = 0.01;// 48
      System.out.println(cFake);// 49
      if ((double)n < 1.0 - (double)n && (cFake = (double)(n + 5)) > cFake * cFake - cFake / 2.0// 53
         ? !((double)n > cFake)
         : !((double)n < 5.0 - (cFake = (double)n))) {
         cFake += 5.0;// 57
      } else {
         System.out.println(cFake);// 54
         cFake += 2.0;// 55
      }

      System.out.println(cFake);// 59
      double d;
      if ((d = (double)n) > 0.0) {// 63
         System.out.println(d);// 64
      }
   }// 67

   void testBooleanNormalness(int n) {
      int p = n * 2;// 71
      int k;
      if (n < 5 && (k = n + 5) > 0 && (p /= k) != 0) {// 72
         System.out.println("hi");// 73
      }

      p += 8;// 75
      System.out.println(p);// 76
   }// 77

   void testBooleanNormalnessInline(int n) {
      int p = n * 2;// 81
      int k;
      n < 5 && (k = n + 5) > 0 && (p /= k) != 0;// 82
      p += 8;// 83
      System.out.println(p);// 84
   }// 85

   void nestedTernaries(int a, int b, int c) {
      label47: {
         int x;
         if (a > 0) {// 89
            if (c >= b) {
               break label47;
            }

            x = b;
            if (b <= 0) {
               break label47;
            }
         } else {
            x = c;
            if (c >= 0 && c != b) {
               break label47;
            }
         }

         System.out.println(x);// 90
      }

      int y;
      label38: {
         int z;
         label37: {
            label50: {
               if (a > 0) {// 94
                  if (c >= b) {
                     break label50;
                  }

                  y = b;
                  if (b <= 0) {
                     break label50;
                  }
               } else {
                  y = c;
                  if (c >= 0 && c != b) {
                     break label50;
                  }
               }

               if (1 <= b - c || (z = b - c) == a) {
                  break label38;
               }
               break label37;
            }

            y = 5;
            z = a;
            if (5 == a) {
               break label38;
            }
         }

         System.out.println(z);// 97
      }

      System.out.println(y);// 99
   }// 100
}

class 'pkg/TestDefiniteAssignment' {
   method 'testExample16$1$$1 (I)V' {
      0      7
      1      7
      4      7
      5      7
      6      7
      7      7
      8      7
      9      7
      b      7
      c      7
      f      8
      10      8
      11      8
      12      8
      13      8
      16      10
   }

   method 'testExample16$1$$2 (I)V' {
      0      13
      2      13
      3      13
      4      13
      a      14
      b      14
      c      14
      10      17
      11      17
      12      17
      13      17
      14      17
      15      17
      16      17
      17      18
   }

   method 'testExample16$1$$3modified (II)V' {
      0      23
      1      23
      2      23
      5      24
      7      24
      8      25
      9      25
      c      30
      d      30
      e      31
      f      31
      10      31
      16      35
      17      35
      18      35
      1c      38
      1d      38
      1e      38
      1f      38
      20      38
      21      38
      22      38
      23      39
   }

   method 'testAssignments (IZ)V' {
      0      42
      1      42
      4      43
      6      43
      7      44
      a      44
      b      44
      d      44
      e      44
      f      44
      10      44
      13      45
      14      45
      15      45
      16      45
      17      45
      1a      50
      1b      50
      1e      50
      22      50
      23      50
      24      50
      26      50
      27      50
      28      50
      2b      53
      2c      53
      2d      53
      2e      53
      2f      53
      30      53
      31      53
      32      53
      36      51
      37      51
      38      51
      39      51
      3a      51
      3b      51
      3e      56
      3f      56
      40      56
      41      56
      42      56
      43      57
      44      57
      45      57
      46      57
      47      57
      48      57
      49      57
      4a      57
      4b      58
      4c      58
      4d      58
      4e      58
      4f      58
      50      58
      51      58
      52      58
      55      58
      56      58
      57      58
      58      58
      5a      58
      5b      58
      5c      58
      5d      58
      5e      58
      5f      58
      60      58
      61      58
      62      58
      63      58
      64      58
      65      58
      66      58
      67      58
      68      58
      69      58
      6c      60
      6d      60
      6e      60
      6f      60
      70      60
      71      60
      72      60
      74      60
      75      60
      76      60
      77      60
      78      60
      7e      59
      7f      59
      80      59
      81      59
      82      59
      83      59
      86      63
      87      63
      88      63
      89      63
      8a      63
      8b      63
      8c      63
      8d      63
      90      64
      91      64
      92      64
      94      64
      95      64
      9b      61
      9c      61
      9d      61
      9f      61
      a0      61
      a1      67
      a2      67
      a3      67
      a4      67
      a5      67
      a6      67
      a7      67
      a8      67
      a9      69
      aa      69
      ac      69
      ad      69
      ae      69
      af      69
      b0      69
      bb      69
      be      70
      bf      70
      c0      70
      c1      70
      c2      70
      c3      70
      c6      72
   }

   method 'testBooleanNormalness (I)V' {
      0      75
      1      75
      2      75
      3      75
      4      77
      5      77
      6      77
      9      77
      a      77
      b      77
      d      77
      e      77
      12      77
      15      77
      16      77
      19      78
      1a      78
      1b      78
      1c      78
      1d      78
      1e      78
      21      81
      22      81
      23      81
      24      82
      25      82
      26      82
      27      82
      28      82
      29      82
      2a      82
      2b      83
   }

   method 'testBooleanNormalnessInline (I)V' {
      0      86
      1      86
      2      86
      3      86
      4      88
      5      88
      6      88
      9      88
      a      88
      b      88
      d      88
      e      88
      12      88
      15      88
      16      88
      1e      88
      1f      88
      20      88
      22      89
      23      89
      24      89
      25      90
      26      90
      27      90
      28      90
      29      90
      2a      90
      2b      90
      2c      91
   }

   method 'nestedTernaries (III)V' {
      0      96
      1      96
      4      97
      5      97
      6      97
      9      101
      b      101
      c      101
      d      102
      13      106
      15      106
      16      106
      17      107
      1a      107
      1b      107
      1c      107
      1f      112
      20      112
      21      112
      22      112
      23      112
      24      112
      27      120
      28      120
      2b      121
      2c      121
      2d      121
      30      125
      32      125
      33      125
      34      126
      3a      130
      3c      130
      3d      130
      3e      131
      41      131
      42      131
      43      131
      46      136
      47      136
      48      136
      49      136
      4a      136
      4d      136
      4e      136
      4f      136
      51      136
      52      136
      53      136
      54      136
      5a      142
      5c      142
      5d      142
      5e      143
      60      143
      61      143
      62      144
      65      149
      66      149
      67      149
      68      149
      69      149
      6a      149
      6d      152
      6e      152
      6f      152
      70      152
      71      152
      72      152
      73      152
      74      152
      75      153
   }
}

Lines mapping:
8 <-> 8
9 <-> 9
10 <-> 11
16 <-> 14
17 <-> 14
18 <-> 15
20 <-> 18
22 <-> 19
26 <-> 24
27 <-> 31
28 <-> 32
29 <-> 36
31 <-> 39
32 <-> 40
36 <-> 43
37 <-> 46
41 <-> 51
42 <-> 54
44 <-> 52
48 <-> 57
49 <-> 58
53 <-> 59
54 <-> 64
55 <-> 65
57 <-> 62
59 <-> 68
63 <-> 70
64 <-> 71
67 <-> 73
71 <-> 76
72 <-> 78
73 <-> 79
75 <-> 82
76 <-> 83
77 <-> 84
81 <-> 87
82 <-> 89
83 <-> 90
84 <-> 91
85 <-> 92
89 <-> 97
90 <-> 113
94 <-> 121
97 <-> 150
99 <-> 153
100 <-> 154
