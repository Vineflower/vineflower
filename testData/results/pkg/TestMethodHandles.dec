package pkg;

import java.io.PrintStream;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandles.Lookup;

public class TestMethodHandles {
   private static final Lookup LOOKUP = MethodHandles.lookup();

   public void test1() throws Throwable {
      MethodHandle abs = LOOKUP.findStatic(Math.class, "abs", MethodType.methodType(long.class, long.class));// 10
      int a = -5;// 11
      long b = (long)abs.invokeExact((long)a);// 12
      System.out.println(b);// 13
   }// 14

   public int test2() throws Throwable {
      MethodHandle abs = LOOKUP.findStatic(Math.class, "abs", MethodType.methodType(long.class, long.class));// 17
      int a = -5;// 18
      return (int)(long)abs.invokeExact((long)a);// 19
   }

   public void test3() throws Throwable {
      MethodHandle abs = LOOKUP.findStatic(Math.class, "abs", MethodType.methodType(long.class, long.class));// 23
      int a = -5;// 24
      long b = (long)abs.invoke((long)a);// 25
      System.out.println(b);// 26
   }// 27

   public int test4() throws Throwable {
      MethodHandle abs = LOOKUP.findStatic(Math.class, "abs", MethodType.methodType(long.class, long.class));// 30
      int a = -5;// 31
      return (int)(long)abs.invoke((long)a);// 32
   }

   public void test5() throws Throwable {
      MethodHandle println = LOOKUP.findVirtual(PrintStream.class, "println", MethodType.methodType(void.class, long.class));// 36
      int a = -5;// 37
      println.invokeExact(System.out, (long)a);// 38
   }// 39
}

class 'pkg/TestMethodHandles' {
   method 'test1 ()V' {
      0      12
      1      12
      2      12
      3      12
      4      12
      5      12
      6      12
      d      12
      e      12
      f      12
      10      12
      11      12
      12      12
      13      12
      14      13
      15      13
      16      13
      17      14
      18      14
      19      14
      1a      14
      1b      14
      1c      14
      1d      14
      1e      15
      1f      15
      20      15
      21      15
      22      15
      23      15
      24      15
      25      16
   }

   method 'test2 ()I' {
      0      19
      1      19
      2      19
      3      19
      4      19
      5      19
      6      19
      d      19
      e      19
      f      19
      10      19
      11      19
      12      19
      13      19
      14      20
      15      20
      16      20
      17      21
      18      21
      19      21
      1a      21
      1b      21
      1c      21
      1d      21
      1e      21
   }

   method 'test3 ()V' {
      0      25
      1      25
      2      25
      3      25
      4      25
      5      25
      6      25
      d      25
      e      25
      f      25
      10      25
      11      25
      12      25
      13      25
      14      26
      15      26
      16      26
      17      27
      18      27
      19      27
      1a      27
      1b      27
      1c      27
      1d      27
      1e      28
      1f      28
      20      28
      21      28
      22      28
      23      28
      24      28
      25      29
   }

   method 'test4 ()I' {
      0      32
      1      32
      2      32
      3      32
      4      32
      5      32
      6      32
      d      32
      e      32
      f      32
      10      32
      11      32
      12      32
      13      32
      14      33
      15      33
      16      33
      17      34
      18      34
      19      34
      1a      34
      1b      34
      1c      34
      1d      34
      1e      34
   }

   method 'test5 ()V' {
      0      38
      1      38
      2      38
      3      38
      4      38
      5      38
      6      38
      d      38
      e      38
      f      38
      10      38
      11      38
      12      38
      13      38
      14      39
      15      39
      16      39
      17      40
      18      40
      19      40
      1a      40
      1b      40
      1c      40
      1d      40
      1e      40
      1f      40
      20      41
   }
}

Lines mapping:
10 <-> 13
11 <-> 14
12 <-> 15
13 <-> 16
14 <-> 17
17 <-> 20
18 <-> 21
19 <-> 22
23 <-> 26
24 <-> 27
25 <-> 28
26 <-> 29
27 <-> 30
30 <-> 33
31 <-> 34
32 <-> 35
36 <-> 39
37 <-> 40
38 <-> 41
39 <-> 42
