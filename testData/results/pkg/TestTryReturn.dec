package pkg;

import java.util.Random;
import java.util.function.Supplier;

public class TestTryReturn {
   public boolean test(Supplier<Boolean> supplier) {
      try {
         return supplier.get();// 9
      } catch (Exception var3) {// 10
         throw new RuntimeException(var3);// 11
      }
   }

   public boolean testFinally(Supplier<Boolean> supplier) {
      boolean var2;
      try {
         var2 = supplier.get();
      } finally {
         System.out.println("Finally");// 19
      }

      return var2;// 17
   }

   public void testFinally1(Supplier<Boolean> supplier) {
      System.out.println("pred");// 24

      label27: {
         try {
            if (!supplier.get()) {// 27
               break label27;
            }
         } finally {
            System.out.println("Finally");// 31
         }

         return;// 28
      }

      System.out.println("suc");// 32 34
   }

   public boolean testFinally2(Supplier<Boolean> supplier) {
      boolean b;
      try {
         b = supplier.get();// 40
      } finally {
         System.out.println("Finally");// 42
      }

      return b;// 43 45
   }

   public boolean testFinally3(boolean b, boolean c, int a, Supplier<Boolean> supplier) {
      boolean var5;
      try {
         if (b) {// 50
            return c && supplier.get();// 51
         }

         if (a <= 0) {// 54
            return supplier.get();// 58
         }

         var5 = a == 1;
      } finally {
         System.out.println("Finally");// 60
      }

      return var5;// 55
   }

   public boolean testFinally4(Supplier<Boolean> supplier) {
      boolean b = false;// 65

      try {
         b = supplier.get();// 67
      } finally {
         System.out.println("Finally");// 69
      }

      return b;// 70 72
   }

   public boolean testFinally5(Supplier<Boolean> supplier) {
      boolean b = false;// 76

      try {
         b = supplier.get();// 78
      } catch (Exception var7) {// 79
         System.out.println("Catch");// 80
         b = supplier.get();// 81
      } finally {
         System.out.println("Finally");// 83
      }

      return b;// 86
   }

   public boolean testFinally6(boolean a, Supplier<Boolean> supplier) {
      boolean b = false;// 90

      try {
         if (a) {// 92
            b = true;// 93
            System.out.println("If");// 94
         }

         b = supplier.get();// 97
      } catch (Exception var8) {// 98
         System.out.println("Catch");// 99
         b = supplier.get();// 100
      } finally {
         System.out.println("Finally");// 102
      }

      return b;// 105
   }

   public void testLoopFinally() {
      boolean a = true;// 109

      while(true) {
         try {
            if (a) {// 113
               return;// 114
            }
         } finally {
            System.out.println("Finally");// 117
         }
      }
   }

   public void testParsingFailure() {
      // $QF: Couldn't be decompiled
      // Bytecode:
      // 00: bipush 116
      // 02: istore 1
      // 03: iload 1
      // 04: bipush 113
      // 06: if_icmpeq 2a
      // 09: getstatic java/lang/System.out Ljava/io/PrintStream;
      // 0c: iload 1
      // 0d: invokevirtual java/io/PrintStream.println (C)V
      // 10: getstatic java/lang/System.out Ljava/io/PrintStream;
      // 13: iload 1
      // 14: invokevirtual java/io/PrintStream.println (C)V
      // 17: return
      // 18: astore 2
      // 19: getstatic java/lang/System.out Ljava/io/PrintStream;
      // 1c: iload 1
      // 1d: invokevirtual java/io/PrintStream.println (C)V
      // 20: return
      // 21: astore 3
      // 22: getstatic java/lang/System.out Ljava/io/PrintStream;
      // 25: iload 1
      // 26: invokevirtual java/io/PrintStream.println (C)V
      // 29: return
      // 2a: getstatic java/lang/System.out Ljava/io/PrintStream;
      // 2d: iload 1
      // 2e: invokevirtual java/io/PrintStream.println (C)V
      // 31: return
      // 32: astore 4
      // 34: getstatic java/lang/System.out Ljava/io/PrintStream;
      // 37: iload 1
      // 38: invokevirtual java/io/PrintStream.println (C)V
      // 3b: return
   }

   public void testPostdomFailure() {
      System.out.println(1);// 143

      while(new Random().nextBoolean()) {// 145
         try {
            try {
               System.out.println(2);// 148
            } catch (Exception var14) {// 149
               System.out.println(3);// 150
            } finally {
               continue;// 153
            }
         } finally {
            boolean var7 = true;// 156
         }
      }
   }// 159

   public void testVarWrong() {
      try {
         System.out.println("Hi");// 164
         return;// 174
      } catch (Exception var8) {// 165
         if (var8 == null) {// 166
            System.out.println(var8);// 169
            return;// 170
         }
      } finally {
         float var5 = 9.18F;// 173
      }
   }// 167

   public void testInvalidUse() {
      boolean var1 = false;// 178
      String var3 = "Hi!";// 179

      try {
         Exception var4;
         try {
            System.out.println(var1);// 181
            return;// 182
         } catch (Exception var15) {// 183
            var4 = var15;
         }

         try {
            System.out.println(var4);// 185
            return;// 195
         } catch (Exception var16) {// 186
         } finally {
            System.out.println(var4);// 190
         }
      } finally {
         System.out.println(var3);// 194
      }
   }// 187
}

class 'pkg/TestTryReturn' {
   method 'test (Ljava/util/function/Supplier;)Z' {
      0      8
      1      8
      2      8
      3      8
      4      8
      5      8
      9      8
      a      8
      b      8
      c      8
      d      9
      16      10
   }

   method 'testFinally (Ljava/util/function/Supplier;)Z' {
      0      17
      1      17
      2      17
      3      17
      4      17
      5      17
      9      17
      a      17
      b      17
      c      17
      15      22
      16      22
      17      19
      18      19
      19      19
      1a      19
      1b      19
      1c      19
   }

   method 'testFinally1 (Ljava/util/function/Supplier;)V' {
      0      26
      1      26
      2      26
      3      26
      4      26
      5      26
      8      30
      9      30
      a      30
      b      30
      c      30
      d      30
      11      30
      12      30
      13      30
      14      30
      1f      37
      28      40
      29      40
      2a      40
      2b      34
      2c      34
      2d      34
      2e      34
      2f      34
      30      34
      31      40
      32      40
      33      40
      34      40
      35      40
      36      40
      37      40
      38      40
      39      40
      3a      40
      3b      41
   }

   method 'testFinally2 (Ljava/util/function/Supplier;)Z' {
      0      46
      1      46
      2      46
      3      46
      4      46
      5      46
      9      46
      a      46
      b      46
      c      46
      15      51
      16      51
      17      51
      18      48
      19      48
      1a      48
      1b      48
      1c      48
      1d      48
      1e      51
      1f      51
      20      51
      21      51
      22      51
      23      51
   }

   method 'testFinally3 (ZZILjava/util/function/Supplier;)Z' {
      0      57
      1      57
      4      58
      8      58
      9      58
      a      58
      b      58
      c      58
      d      58
      e      58
      12      58
      13      58
      14      58
      29      58
      2a      61
      2b      61
      2e      65
      2f      65
      30      65
      38      65
      39      65
      42      70
      43      70
      44      70
      45      62
      46      62
      47      62
      48      62
      49      62
      4a      62
      4b      62
      4f      62
      50      62
      51      62
      5e      62
      5f      67
      60      67
      61      67
      62      67
      63      67
      64      67
      65      67
   }

   method 'testFinally4 (Ljava/util/function/Supplier;)Z' {
      0      74
      1      74
      2      77
      3      77
      4      77
      5      77
      6      77
      7      77
      b      77
      c      77
      d      77
      e      77
      17      82
      18      82
      19      82
      1a      79
      1b      79
      1c      79
      1d      79
      1e      79
      1f      79
      20      82
      21      82
      22      82
      23      82
      24      82
      25      82
   }

   method 'testFinally5 (Ljava/util/function/Supplier;)Z' {
      0      86
      1      86
      2      89
      3      89
      4      89
      5      89
      6      89
      7      89
      b      89
      c      89
      d      89
      e      89
      1a      90
      1b      91
      1c      91
      1d      91
      1e      91
      1f      91
      20      91
      21      91
      22      91
      23      92
      24      92
      25      92
      26      92
      27      92
      28      92
      2c      92
      2d      92
      2e      92
      2f      92
      3b      94
      3c      94
      3d      94
      3e      94
      3f      94
      40      94
      41      94
      48      97
      49      97
   }

   method 'testFinally6 (ZLjava/util/function/Supplier;)Z' {
      0      101
      1      101
      2      104
      3      104
      6      105
      7      105
      8      106
      9      106
      a      106
      b      106
      c      106
      d      106
      10      109
      11      109
      12      109
      13      109
      14      109
      15      109
      19      109
      1a      109
      1b      109
      1c      109
      28      110
      2a      111
      2b      111
      2c      111
      2d      111
      2e      111
      2f      111
      30      111
      31      111
      32      112
      33      112
      34      112
      35      112
      36      112
      37      112
      3b      112
      3c      112
      3d      112
      3e      112
      4a      114
      4b      114
      4c      114
      4d      114
      4e      114
      4f      114
      50      114
      57      117
      58      117
   }

   method 'testLoopFinally ()V' {
      0      121
      1      121
      2      125
      3      125
      e      126
      1a      129
      1b      129
      1c      129
      1d      129
      1e      129
      1f      129
   }

   method 'testPostdomFailure ()V' {
      0      171
      1      171
      2      171
      3      171
      4      171
      e      173
      f      173
      10      173
      14      176
      15      176
      16      176
      17      176
      18      176
      21      177
      22      178
      23      178
      24      178
      25      178
      26      178
      2f      180
      38      183
      39      183
      3a      183
      3b      183
      41      186
   }

   method 'testVarWrong ()V' {
      0      190
      1      190
      2      190
      3      190
      4      190
      5      190
      b      191
      e      192
      10      193
      16      200
      17      194
      18      194
      19      194
      1b      194
      21      195
      22      198
      23      198
      24      198
      25      198
   }

   method 'testInvalidUse ()V' {
      0      203
      1      203
      2      204
      3      204
      4      204
      5      209
      6      209
      7      209
      8      209
      9      209
      13      210
      14      211
      15      216
      16      216
      17      216
      18      216
      19      216
      26      218
      36      225
      37      220
      38      220
      39      220
      3a      220
      3b      220
      3c      220
      4a      217
      4d      223
      4e      223
      4f      223
      50      223
      51      223
      52      223
   }
}

Lines mapping:
9 <-> 9
10 <-> 10
11 <-> 11
17 <-> 23
19 <-> 20
24 <-> 27
27 <-> 31
28 <-> 38
31 <-> 35
32 <-> 41
34 <-> 41
40 <-> 47
42 <-> 49
43 <-> 52
45 <-> 52
50 <-> 58
51 <-> 59
54 <-> 62
55 <-> 71
58 <-> 63
60 <-> 68
65 <-> 75
67 <-> 78
69 <-> 80
70 <-> 83
72 <-> 83
76 <-> 87
78 <-> 90
79 <-> 91
80 <-> 92
81 <-> 93
83 <-> 95
86 <-> 98
90 <-> 102
92 <-> 105
93 <-> 106
94 <-> 107
97 <-> 110
98 <-> 111
99 <-> 112
100 <-> 113
102 <-> 115
105 <-> 118
109 <-> 122
113 <-> 126
114 <-> 127
117 <-> 130
143 <-> 172
145 <-> 174
148 <-> 177
149 <-> 178
150 <-> 179
153 <-> 181
156 <-> 184
159 <-> 187
164 <-> 191
165 <-> 193
166 <-> 194
167 <-> 201
169 <-> 195
170 <-> 196
173 <-> 199
174 <-> 192
178 <-> 204
179 <-> 205
181 <-> 210
182 <-> 211
183 <-> 212
185 <-> 217
186 <-> 219
187 <-> 226
190 <-> 221
194 <-> 224
195 <-> 218
Not mapped:
20
35
61
84
103
118
157
175
191
196
