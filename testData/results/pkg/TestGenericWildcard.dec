package pkg;

import java.util.Comparator;
import java.util.Optional;

public class TestGenericWildcard<T> {
   public TestGenericWildcard<?> wildcard() {
      return null;// 8
   }

   public TestGenericWildcard<T> generic() {
      return (TestGenericWildcard<T>)this.wildcard();// 12
   }

   public <E> TestGenericWildcard<E> cast(TestGenericWildcard<? extends E> e) {
      return (TestGenericWildcard<E>)e;// 16
   }

   public <E> TestGenericWildcard<E> castOtherType(TestGenericWildcard<? extends TestGenericWildcard<E>> e) {
      return (TestGenericWildcard<E>)e;// 20
   }

   public <E> Optional<TestGenericWildcard<E>> castOptional(boolean bl, TestGenericWildcard<? extends TestGenericWildcard<E>> e) {
      return bl ? Optional.of((TestGenericWildcard<E>)e) : Optional.empty();// 24
   }

   public <E> TestGenericWildcard<? super E> cast2(TestGenericWildcard<? extends E> e) {
      return (TestGenericWildcard<? super E>)e;// 28
   }

   public TestGenericWildcard<TestGenericWildcard> typed() {
      return (TestGenericWildcard<TestGenericWildcard>)this.wildcard();// 32
   }

   static class One<T> implements Comparable<TestGenericWildcard.One<?>> {
      public Comparator<T> cmp;
      public T obj;

      public int compareTo(TestGenericWildcard.One<?> o) {
         return this.cmp.compare(this.obj, (T)o.obj);// 55
      }
   }

   class Two<A, B> {
      public TestGenericWildcard<T>.Two<?, B> wildcard() {
         return null;// 37
      }

      public TestGenericWildcard<T>.Two<A, B> generic() {
         return (TestGenericWildcard<T>.Two<A, B>)this.wildcard();// 41
      }

      public TestGenericWildcard<T>.Two<TestGenericWildcard.Two, TestGenericWildcard.Two> typed() {
         return (TestGenericWildcard<T>.Two<TestGenericWildcard.Two, TestGenericWildcard.Two>)this.wildcard();// 45
      }
   }
}

class 'pkg/TestGenericWildcard' {
   method 'wildcard ()Lpkg/TestGenericWildcard;' {
      0      7
      1      7
   }

   method 'generic ()Lpkg/TestGenericWildcard;' {
      0      11
      1      11
      2      11
      3      11
      4      11
   }

   method 'cast (Lpkg/TestGenericWildcard;)Lpkg/TestGenericWildcard;' {
      0      15
      1      15
   }

   method 'castOtherType (Lpkg/TestGenericWildcard;)Lpkg/TestGenericWildcard;' {
      0      19
      1      19
   }

   method 'castOptional (ZLpkg/TestGenericWildcard;)Ljava/util/Optional;' {
      0      23
      1      23
      4      23
      5      23
      6      23
      7      23
      b      23
      e      23
   }

   method 'cast2 (Lpkg/TestGenericWildcard;)Lpkg/TestGenericWildcard;' {
      0      27
      1      27
   }

   method 'typed ()Lpkg/TestGenericWildcard;' {
      0      31
      1      31
      2      31
      3      31
      4      31
   }
}

class 'pkg/TestGenericWildcard$One' {
   method 'compareTo (Lpkg/TestGenericWildcard$One;)I' {
      0      39
      1      39
      2      39
      3      39
      4      39
      5      39
      6      39
      7      39
      8      39
      9      39
      a      39
      b      39
      c      39
      d      39
      e      39
      f      39
      10      39
      11      39
   }
}

class 'pkg/TestGenericWildcard$Two' {
   method 'wildcard ()Lpkg/TestGenericWildcard$Two;' {
      0      45
      1      45
   }

   method 'generic ()Lpkg/TestGenericWildcard$Two;' {
      0      49
      1      49
      2      49
      3      49
      4      49
   }

   method 'typed ()Lpkg/TestGenericWildcard$Two;' {
      0      53
      1      53
      2      53
      3      53
      4      53
   }
}

Lines mapping:
8 <-> 8
12 <-> 12
16 <-> 16
20 <-> 20
24 <-> 24
28 <-> 28
32 <-> 32
37 <-> 46
41 <-> 50
45 <-> 54
55 <-> 40