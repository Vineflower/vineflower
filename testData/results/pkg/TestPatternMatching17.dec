package pkg;

public class TestPatternMatching17 {
   public void testSimple(Object obj) {
      if (obj instanceof String str) {// 5
         System.out.println(str.length());// 6
      }
   }// 8

   public void testInverted(Object obj) {
      if (obj instanceof String) {// 11
         String str = (String)obj;
      } else {
         System.out.println("Oh no");// 12
      }
   }// 14

   public void testCompound(Object obj) {
      if (obj instanceof String str && str.contains("hi")) {// 17
         System.out.println(str.length());// 18
      }
   }// 20

   public void testSimpleLoop(Object obj) {
      while(obj instanceof String) {// 24
         String str = (String)obj;
         System.out.println(str.length());// 25
         obj = str.intern();// 26
      }
   }// 28

   public void testSimpleLoopUnused(Object obj) {
      while(obj instanceof String) {// 31
         String str = (String)obj;
         obj = obj.hashCode() + "";// 32
      }
   }// 34

   public void testInvertedLoop(Object obj) {
      while(!(obj instanceof String)) {// 37
         System.out.println("Oh no");// 38
         obj = obj.toString();// 39
      }

      String str = (String)obj;
      System.out.println(str.hashCode());// 41
   }

   public void testInvertedLoopUnused(Object obj) {
      while(!(obj instanceof String)) {// 45
         System.out.println("Oh no");// 46
         obj = obj.toString();// 47
      }

      String str = (String)obj;
   }

   public void testCompoundLoop(Object obj) {
      while(obj instanceof String str && str.contains("hi")) {// 52
         obj = str.substring(1);// 53
      }
   }// 55

   public boolean testReturn(Object obj) {
      if (obj instanceof String s && s.length() > 5) {// 58
         return true;
      }

      return false;
   }

   public int testReturnTernary(Object obj) {
      return obj instanceof String s ? s.length() : 0;// 62
   }

   public int testReturnTernaryComplex(Object obj) {
      return (!(obj instanceof String s) || s.length() <= 5) && !(obj instanceof Integer) ? 1 : 4;// 66
   }

   public void testLoop(Object obj) {
      while(obj instanceof String s && s.length() > 10) {// 70
         String var3 = s.substring(1);// 71
         obj = var3.substring(1);// 72
         System.out.println(var3);// 74
      }
   }// 76

   public void testSimpleReturn(Object obj) {
      if (obj instanceof String str && str.length() > 5) {// 79 80
         return;// 81
      }

      System.out.println("test");// 85
   }// 86

   public void testMessyLVT(Object obj) {
      String a = "a";// 90
      String b = "b";// 91
      String c = "c";// 92
      String d = "d";// 93
      String e = "e";// 94
      String f = "f";// 95
      String g = "g";// 96
      String h = "h";// 97
      String var10 = "i";// 98
      if (obj instanceof String str) {// 100
         System.out.println(str.length());// 101
      }
   }// 103
}

class 'pkg/TestPatternMatching17' {
   method 'testSimple (Ljava/lang/Object;)V' {
      0      4
      1      4
      2      4
      3      4
      4      4
      b      4
      c      5
      d      5
      e      5
      f      5
      10      5
      11      5
      12      5
      13      5
      16      7
   }

   method 'testInverted (Ljava/lang/Object;)V' {
      0      10
      1      10
      2      10
      3      10
      4      10
      7      11
      8      11
      9      11
      a      11
      b      11
      f      13
      10      13
      11      13
      12      13
      13      13
      14      13
      17      15
   }

   method 'testCompound (Ljava/lang/Object;)V' {
      0      18
      1      18
      2      18
      3      18
      4      18
      b      18
      c      18
      d      18
      e      18
      f      18
      10      18
      11      18
      12      18
      15      19
      16      19
      17      19
      18      19
      19      19
      1a      19
      1b      19
      1c      19
      1f      21
   }

   method 'testSimpleLoop (Ljava/lang/Object;)V' {
      0      24
      1      24
      2      24
      3      24
      7      25
      8      25
      9      25
      a      25
      b      25
      c      26
      d      26
      e      26
      f      26
      10      26
      11      26
      12      26
      13      26
      14      26
      15      26
      16      27
      17      27
      18      27
      19      27
      1a      27
      1e      29
   }

   method 'testSimpleLoopUnused (Ljava/lang/Object;)V' {
      0      32
      1      32
      2      32
      3      32
      7      33
      8      33
      9      33
      a      33
      b      33
      c      34
      d      34
      e      34
      f      34
      10      34
      11      34
      12      34
      13      34
      14      34
      15      34
      19      36
   }

   method 'testInvertedLoop (Ljava/lang/Object;)V' {
      0      39
      1      39
      2      39
      3      39
      4      39
      7      44
      8      44
      9      44
      a      44
      b      44
      c      45
      d      45
      e      45
      f      40
      10      40
      11      40
      12      40
      13      40
      14      40
      15      40
      16      40
      17      41
      18      41
      19      41
      1a      41
      1b      41
      1c      45
      1d      45
      1e      45
      1f      45
      20      45
      21      45
      22      45
      23      45
      24      45
      25      45
      26      46
      27      46
      28      46
   }

   method 'testInvertedLoopUnused (Ljava/lang/Object;)V' {
      0      49
      1      49
      2      49
      3      49
      4      49
      7      54
      8      54
      9      54
      a      54
      b      54
      c      55
      d      55
      e      55
      f      50
      10      50
      11      50
      12      50
      13      50
      14      50
      15      50
      16      50
      17      51
      18      51
      19      51
      1a      51
      1b      51
      1c      55
      1d      55
      1e      55
   }

   method 'testCompoundLoop (Ljava/lang/Object;)V' {
      0      58
      1      58
      2      58
      3      58
      4      58
      b      58
      c      58
      d      58
      e      58
      f      58
      10      58
      11      58
      12      58
      15      59
      16      59
      17      59
      18      59
      19      59
      1a      59
      1e      61
   }

   method 'testReturn (Ljava/lang/Object;)Z' {
      0      64
      1      64
      2      64
      3      64
      4      64
      b      64
      c      64
      d      64
      e      64
      f      64
      10      64
      11      64
      14      65
      18      68
      19      65
   }

   method 'testReturnTernary (Ljava/lang/Object;)I' {
      0      72
      1      72
      2      72
      3      72
      4      72
      b      72
      c      72
      d      72
      e      72
      f      72
      13      72
      14      72
   }

   method 'testReturnTernaryComplex (Ljava/lang/Object;)I' {
      0      76
      1      76
      2      76
      3      76
      4      76
      b      76
      c      76
      d      76
      e      76
      f      76
      10      76
      11      76
      14      76
      15      76
      16      76
      17      76
      18      76
      1b      76
      1f      76
      20      76
   }

   method 'testLoop (Ljava/lang/Object;)V' {
      0      80
      1      80
      2      80
      3      80
      4      80
      b      80
      c      80
      d      80
      e      80
      f      80
      10      80
      11      80
      12      80
      15      81
      16      81
      17      81
      18      81
      19      81
      1a      81
      1b      82
      1c      82
      1d      82
      1e      82
      1f      82
      20      82
      21      83
      22      83
      23      83
      24      83
      25      83
      26      83
      27      83
      2b      85
   }

   method 'testSimpleReturn (Ljava/lang/Object;)V' {
      0      88
      1      88
      2      88
      3      88
      4      88
      b      88
      c      88
      d      88
      e      88
      f      88
      10      88
      11      88
      14      89
      15      92
      16      92
      17      92
      18      92
      19      92
      1a      92
      1b      92
      1c      92
      1d      93
   }

   method 'testMessyLVT (Ljava/lang/Object;)V' {
      0      96
      1      96
      2      96
      3      97
      4      97
      5      97
      6      98
      7      98
      8      98
      9      98
      a      99
      b      99
      c      99
      d      99
      e      100
      f      100
      10      100
      11      100
      12      101
      13      101
      14      101
      15      101
      16      102
      17      102
      18      102
      19      102
      1a      103
      1b      103
      1c      103
      1d      103
      1e      104
      1f      104
      20      104
      21      104
      22      105
      23      105
      24      105
      25      105
      26      105
      2d      105
      2e      106
      2f      106
      30      106
      31      106
      32      106
      33      106
      34      106
      35      106
      38      108
   }
}

Lines mapping:
5 <-> 5
6 <-> 6
8 <-> 8
11 <-> 11
12 <-> 14
14 <-> 16
17 <-> 19
18 <-> 20
20 <-> 22
24 <-> 25
25 <-> 27
26 <-> 28
28 <-> 30
31 <-> 33
32 <-> 35
34 <-> 37
37 <-> 40
38 <-> 41
39 <-> 42
41 <-> 46
45 <-> 50
46 <-> 51
47 <-> 52
52 <-> 59
53 <-> 60
55 <-> 62
58 <-> 65
62 <-> 73
66 <-> 77
70 <-> 81
71 <-> 82
72 <-> 83
74 <-> 84
76 <-> 86
79 <-> 89
80 <-> 89
81 <-> 90
85 <-> 93
86 <-> 94
90 <-> 97
91 <-> 98
92 <-> 99
93 <-> 100
94 <-> 101
95 <-> 102
96 <-> 103
97 <-> 104
98 <-> 105
100 <-> 106
101 <-> 107
103 <-> 109
Not mapped:
42
49
