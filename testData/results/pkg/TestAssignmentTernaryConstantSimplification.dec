package pkg;

public class TestAssignmentTernaryConstantSimplification {
   public void ternaryNotAnd(boolean bl, boolean bl2) {
      boolean bl3 = !bl && bl2;// 5
      System.out.println(bl3);// 6
   }// 7

   public void ifOr(boolean bl, boolean bl2) {
      boolean bl3;
      if (bl) {// 11
         bl3 = true;// 12
      } else {
         bl3 = bl2;// 14
      }

      System.out.println(bl3);// 16
   }// 17

   public void ternaryNotOr(boolean bl, boolean bl2) {
      boolean bl3 = !bl || bl2;// 20
      System.out.println(bl3);// 21
   }// 22

   public void ternaryAnd(boolean bl, boolean bl2) {
      boolean bl3 = bl && bl2;// 25
      System.out.println(bl3);// 26
   }// 27

   public void redundantIf(boolean bl) {
      boolean bl3;
      if (bl) {// 31
         bl3 = true;// 32
      } else {
         bl3 = false;// 34
      }

      System.out.println(bl3);// 36
   }// 37

   public void redundantTernary(boolean bl) {
      System.out.println(bl);// 40 41
   }// 42

   public void nestedIf(boolean bl, boolean bl2) {
      boolean bl3;
      if (bl) {// 46
         if (bl2) {// 47
            bl3 = true;// 48
         } else {
            bl3 = bl;// 50
         }
      } else {
         bl3 = true;// 53
      }

      System.out.println(bl3);// 55
   }// 56

   public void nestedTernary(boolean bl, boolean bl2) {
      boolean bl3 = !bl || bl2;// 59
      System.out.println(bl3);// 60
   }// 61

   public void nestedIfs(boolean bl, boolean bl2, boolean bl3) {
      boolean bl4;
      if (bl) {// 65
         if (bl2) {// 66
            bl4 = false;// 67
         } else {
            bl4 = bl3;// 69
         }
      } else if (bl3) {// 72
         bl4 = bl3;// 73
      } else {
         bl4 = bl2;// 75
      }

      System.out.println(bl4);// 78
   }// 79
}

class 'pkg/TestAssignmentTernaryConstantSimplification' {
   method 'ternaryNotAnd (ZZ)V' {
      0      4
      1      4
      8      4
      9      4
      a      5
      b      5
      c      5
      d      5
      e      5
      f      5
      10      5
      11      6
   }

   method 'ifOr (ZZ)V' {
      0      10
      1      10
      4      11
      5      11
      9      13
      a      13
      b      16
      c      16
      d      16
      e      16
      f      16
      10      16
      11      16
      12      17
   }

   method 'ternaryNotOr (ZZ)V' {
      0      20
      1      20
      4      20
      9      20
      a      21
      b      21
      c      21
      d      21
      e      21
      f      21
      10      21
      11      22
   }

   method 'ternaryAnd (ZZ)V' {
      0      25
      1      25
      4      25
      9      25
      a      26
      b      26
      c      26
      d      26
      e      26
      f      26
      10      26
      11      27
   }

   method 'redundantIf (Z)V' {
      0      31
      1      31
      4      32
      5      32
      9      34
      a      34
      b      37
      c      37
      d      37
      e      37
      f      37
      10      37
      11      37
      12      38
   }

   method 'redundantTernary (Z)V' {
      0      41
      1      41
      a      41
      b      41
      c      41
      d      41
      e      41
      f      41
      10      41
      11      42
   }

   method 'nestedIf (ZZ)V' {
      0      46
      1      46
      4      47
      5      47
      8      48
      9      48
      d      50
      e      50
      12      53
      13      53
      14      56
      15      56
      16      56
      17      56
      18      56
      19      56
      1a      56
      1b      57
   }

   method 'nestedTernary (ZZ)V' {
      0      60
      1      60
      4      60
      5      60
      11      60
      12      61
      13      61
      14      61
      15      61
      16      61
      17      61
      18      61
      19      62
   }

   method 'nestedIfs (ZZZ)V' {
      0      66
      1      66
      4      67
      5      67
      8      68
      9      68
      a      68
      e      70
      f      70
      10      70
      14      72
      15      72
      18      73
      19      73
      1a      73
      1e      75
      1f      75
      20      75
      21      78
      22      78
      23      78
      24      78
      25      78
      26      78
      27      78
      28      78
      29      79
   }
}

Lines mapping:
5 <-> 5
6 <-> 6
7 <-> 7
11 <-> 11
12 <-> 12
14 <-> 14
16 <-> 17
17 <-> 18
20 <-> 21
21 <-> 22
22 <-> 23
25 <-> 26
26 <-> 27
27 <-> 28
31 <-> 32
32 <-> 33
34 <-> 35
36 <-> 38
37 <-> 39
40 <-> 42
41 <-> 42
42 <-> 43
46 <-> 47
47 <-> 48
48 <-> 49
50 <-> 51
53 <-> 54
55 <-> 57
56 <-> 58
59 <-> 61
60 <-> 62
61 <-> 63
65 <-> 67
66 <-> 68
67 <-> 69
69 <-> 71
72 <-> 73
73 <-> 74
75 <-> 76
78 <-> 79
79 <-> 80
